import 'dart:convert';

String injectJs = utf8.fuse(base64).decode("aWYgKHNob3VsZEluamVjdCgpKSB7CiAgICBpbmplY3RTY3JpcHQoZGVjb2RlVVJJQ29tcG9uZW50KGAjQklUSVpFTl9JTkpFQ1QjYCkpOwoKICAgIGlmICgiI0JJVElaRU5fREVCVUcjIikgewogICAgICAgIGluamVjdFNjcmlwdCgiIiwgIi8vdW5wa2cuY29tL3Zjb25zb2xlQGxhdGVzdC9kaXN0L3Zjb25zb2xlLm1pbi5qcyIpCiAgICB9CgogICAgc3RhcnQoKTsKfQoKLy8gRnVuY3Rpb25zCgovKioKICogU2V0cyB1cCB0aGUgc3RyZWFtIGNvbW11bmljYXRpb24gYW5kIHN1Ym1pdHMgc2l0ZSBtZXRhZGF0YQogKgogKi8KYXN5bmMgZnVuY3Rpb24gc3RhcnQoKSB7CiAgICBhd2FpdCBkb21Jc1JlYWR5KCk7CiAgICBjb25zdCBbY2hhaW5JZCwgcnBjXSA9IGF3YWl0IHdpbmRvdy5mbHV0dGVyX2luYXBwd2Vidmlldy5jYWxsSGFuZGxlcigiQml0aXplblJldHJpdmVScGMiKQogICAgd2luZG93LmV0aGVyZXVtLl9CaXRpemVuVXBkYXRlUnBjVXJsKGNoYWluSWQsIHJwYykKICAgIGlmICgiI0JJVElaRU5fREVCVUcjIikgewogICAgICAgIChhc3luYyBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgIHdpbmRvdy5ldGhlcmV1bS5pc01ldGFNYXNrID0gdHJ1ZTsKICAgICAgICAgICAgd2hpbGUgKHdpbmRvdy5WQ29uc29sZSA9PSBudWxsKSB7CiAgICAgICAgICAgICAgICBhd2FpdCBuZXcgUHJvbWlzZShyID0+IHNldFRpbWVvdXQociwgMTAwKSk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgbmV3IHdpbmRvdy5WQ29uc29sZSgpOwogICAgICAgIH0pKCkKICAgIH0KfQoKLyoqCiAqIEluamVjdHMgYSBzY3JpcHQgdGFnIGludG8gdGhlIGN1cnJlbnQgZG9jdW1lbnQKICoKICogQHBhcmFtIHtzdHJpbmd9IGNvbnRlbnQgLSBDb2RlIHRvIGJlIGV4ZWN1dGVkIGluIHRoZSBjdXJyZW50IGRvY3VtZW50CiAqLwpmdW5jdGlvbiBpbmplY3RTY3JpcHQoY29udGVudCwgc3JjKSB7CiAgICB0cnkgewogICAgICAgIGlmICghY29udGVudCAmJiAhc3JjKSB7CiAgICAgICAgICAgIHRocm93ICJFbXB0eSBjb250ZW50IgogICAgICAgIH0KCiAgICAgICAgY29uc3QgY29udGFpbmVyID0gZG9jdW1lbnQuaGVhZCB8fCBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7CgogICAgICAgIC8vIHN5bmNocm9ub3VzbHkgZXhlY3V0ZSBzY3JpcHQgaW4gcGFnZSBjb250ZXh0CiAgICAgICAgY29uc3Qgc2NyaXB0VGFnID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc2NyaXB0Jyk7CiAgICAgICAgc2NyaXB0VGFnLnNldEF0dHJpYnV0ZSgnYXN5bmMnLCBmYWxzZSk7CiAgICAgICAgaWYgKGNvbnRlbnQpIHsKICAgICAgICAgICAgc2NyaXB0VGFnLnRleHRDb250ZW50ID0gY29udGVudDsKICAgICAgICB9CiAgICAgICAgaWYgKHNyYykgewogICAgICAgICAgICBzY3JpcHRUYWcuc3JjID0gc3JjCiAgICAgICAgfQogICAgICAgIGNvbnRhaW5lci5pbnNlcnRCZWZvcmUoc2NyaXB0VGFnLCBjb250YWluZXIuY2hpbGRyZW5bMF0pOwoKICAgICAgICAvLyBzY3JpcHQgZXhlY3V0ZWQ7IHJlbW92ZSBzY3JpcHQgZWxlbWVudCBmcm9tIERPTQogICAgICAgIGNvbnRhaW5lci5yZW1vdmVDaGlsZChzY3JpcHRUYWcpOwogICAgfSBjYXRjaCAoZXJyKSB7CiAgICAgICAgY29uc29sZS5lcnJvcignQml0aXplbiBzY3JpcHQgaW5qZWN0aW9uIGZhaWxlZCcsIGVycik7CiAgICB9Cn0KCi8qKgogKiBEZXRlcm1pbmVzIGlmIHRoZSBwcm92aWRlciBzaG91bGQgYmUgaW5qZWN0ZWQuCiAqCiAqIEByZXR1cm5zIHtib29sZWFufSB7QGNvZGUgdHJ1ZX0gaWYgdGhlIHByb3ZpZGVyIHNob3VsZCBiZSBpbmplY3RlZC4KICovCmZ1bmN0aW9uIHNob3VsZEluamVjdCgpIHsKICAgIHJldHVybiAoCiAgICAgICAgZG9jdHlwZUNoZWNrKCkgJiYKICAgICAgICBzdWZmaXhDaGVjaygpICYmCiAgICAgICAgZG9jdW1lbnRFbGVtZW50Q2hlY2soKSAmJgogICAgICAgICFibG9ja2VkRG9tYWluQ2hlY2soKQogICAgKTsKfQoKLyoqCiAqIENoZWNrcyB0aGUgZG9jdHlwZSBvZiB0aGUgY3VycmVudCBkb2N1bWVudCBpZiBpdCBleGlzdHMKICoKICogQHJldHVybnMge2Jvb2xlYW59IHtAY29kZSB0cnVlfSBpZiB0aGUgZG9jdHlwZSBpcyBodG1sIG9yIGlmIG5vbmUgZXhpc3RzCiAqLwpmdW5jdGlvbiBkb2N0eXBlQ2hlY2soKSB7CiAgICBjb25zdCB7IGRvY3R5cGUgfSA9IHdpbmRvdy5kb2N1bWVudDsKICAgIGlmIChkb2N0eXBlKSB7CiAgICAgICAgcmV0dXJuIGRvY3R5cGUubmFtZSA9PT0gJ2h0bWwnOwogICAgfQogICAgcmV0dXJuIHRydWU7Cn0KCi8qKgogKiBSZXR1cm5zIHdoZXRoZXIgb3Igbm90IHRoZSBleHRlbnNpb24gKHN1ZmZpeCkgb2YgdGhlIGN1cnJlbnQgZG9jdW1lbnQgaXMKICogcHJvaGliaXRlZC4KICoKICogVGhpcyBjaGVja3Mge0Bjb2RlIHdpbmRvdy5sb2NhdGlvbi5wYXRobmFtZX0gYWdhaW5zdCBhIHNldCBvZiBmaWxlIGV4dGVuc2lvbnMKICogdGhhdCBzaG91bGQgbm90IGhhdmUgdGhlIHByb3ZpZGVyIGluamVjdGVkIGludG8gdGhlbS4gVGhpcyBjaGVjayBpcyBpbmRpZmZlcmVudAogKiBvZiBxdWVyeSBwYXJhbWV0ZXJzIGluIHRoZSBsb2NhdGlvbi4KICoKICogQHJldHVybnMge2Jvb2xlYW59IHdoZXRoZXIgb3Igbm90IHRoZSBleHRlbnNpb24gb2YgdGhlIGN1cnJlbnQgZG9jdW1lbnQgaXMgcHJvaGliaXRlZAogKi8KZnVuY3Rpb24gc3VmZml4Q2hlY2soKSB7CiAgICBjb25zdCBwcm9oaWJpdGVkVHlwZXMgPSBbL1xcLnhtbCQvdSwgL1xcLnBkZiQvdV07CiAgICBjb25zdCBjdXJyZW50VXJsID0gd2luZG93LmxvY2F0aW9uLnBhdGhuYW1lOwogICAgZm9yIChsZXQgaSA9IDA7IGkgPCBwcm9oaWJpdGVkVHlwZXMubGVuZ3RoOyBpKyspIHsKICAgICAgICBpZiAocHJvaGliaXRlZFR5cGVzW2ldLnRlc3QoY3VycmVudFVybCkpIHsKICAgICAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICAgIH0KICAgIH0KICAgIHJldHVybiB0cnVlOwp9CgovKioKICogQ2hlY2tzIHRoZSBkb2N1bWVudEVsZW1lbnQgb2YgdGhlIGN1cnJlbnQgZG9jdW1lbnQKICoKICogQHJldHVybnMge2Jvb2xlYW59IHtAY29kZSB0cnVlfSBpZiB0aGUgZG9jdW1lbnRFbGVtZW50IGlzIGFuIGh0bWwgbm9kZSBvciBpZiBub25lIGV4aXN0cwogKi8KZnVuY3Rpb24gZG9jdW1lbnRFbGVtZW50Q2hlY2soKSB7CiAgICBjb25zdCBkb2N1bWVudEVsZW1lbnQgPSBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQubm9kZU5hbWU7CiAgICBpZiAoZG9jdW1lbnRFbGVtZW50KSB7CiAgICAgICAgcmV0dXJuIGRvY3VtZW50RWxlbWVudC50b0xvd2VyQ2FzZSgpID09PSAnaHRtbCc7CiAgICB9CiAgICByZXR1cm4gdHJ1ZTsKfQoKLyoqCiAqIENoZWNrcyBpZiB0aGUgY3VycmVudCBkb21haW4gaXMgYmxvY2tlZAogKgogKiBAcmV0dXJucyB7Ym9vbGVhbn0ge0Bjb2RlIHRydWV9IGlmIHRoZSBjdXJyZW50IGRvbWFpbiBpcyBibG9ja2VkCiAqLwpmdW5jdGlvbiBibG9ja2VkRG9tYWluQ2hlY2soKSB7CiAgICBjb25zdCBibG9ja2VkRG9tYWlucyA9IFsKICAgICAgICAndXNjb3VydHMuZ292JywKICAgICAgICAnZHJvcGJveC5jb20nLAogICAgICAgICd3ZWJieWF3YXJkcy5jb20nLAogICAgICAgICdjZG4uc2hvcGlmeS5jb20vcy9qYXZhc2NyaXB0cy90cmljb3JkZXIveHRsZC1yZWFkLW9ubHktZnJhbWUuaHRtbCcsCiAgICAgICAgJ2FkeWVuLmNvbScsCiAgICAgICAgJ2dyYXZpdHlmb3Jtcy5jb20nLAogICAgICAgICdoYXJib3VyYWlyLmNvbScsCiAgICAgICAgJ2FuaS5nYW1lci5jb20udHcnLAogICAgICAgICdibHVlc2t5Ym9va2luZy5jb20nLAogICAgICAgICdzaGFyZWZpbGUuY29tJywKICAgIF07CiAgICBjb25zdCBjdXJyZW50VXJsID0gd2luZG93LmxvY2F0aW9uLmhyZWY7CiAgICBsZXQgY3VycmVudFJlZ2V4OwogICAgZm9yIChsZXQgaSA9IDA7IGkgPCBibG9ja2VkRG9tYWlucy5sZW5ndGg7IGkrKykgewogICAgICAgIGNvbnN0IGJsb2NrZWREb21haW4gPSBibG9ja2VkRG9tYWluc1tpXS5yZXBsYWNlKCcuJywgJ1xcLicpOwogICAgICAgIGN1cnJlbnRSZWdleCA9IG5ldyBSZWdFeHAoCiAgICAgICAgICAgIGAoPzpodHRwcz86XFwvXFwvKSg/Oig/ISR7YmxvY2tlZERvbWFpbn0pLikqJGAsCiAgICAgICAgICAgICd1JywKICAgICAgICApOwogICAgICAgIGlmICghY3VycmVudFJlZ2V4LnRlc3QoY3VycmVudFVybCkpIHsKICAgICAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgICAgfQogICAgfQogICAgcmV0dXJuIGZhbHNlOwp9CgovKioKICogUmV0dXJucyBhIHByb21pc2UgdGhhdCByZXNvbHZlcyB3aGVuIHRoZSBET00gaXMgbG9hZGVkIChkb2VzIG5vdCB3YWl0IGZvciBpbWFnZXMgdG8gbG9hZCkKICovCmFzeW5jIGZ1bmN0aW9uIGRvbUlzUmVhZHkoKSB7CiAgICAvLyBhbHJlYWR5IGxvYWRlZAogICAgaWYgKFsnaW50ZXJhY3RpdmUnLCAnY29tcGxldGUnXS5pbmNsdWRlcyhkb2N1bWVudC5yZWFkeVN0YXRlKSkgewogICAgICAgIHJldHVybjsKICAgIH0KICAgIC8vIHdhaXQgZm9yIGxvYWQKICAgIGF3YWl0IG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PgogICAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdET01Db250ZW50TG9hZGVkJywgcmVzb2x2ZSwgeyBvbmNlOiB0cnVlIH0pLAogICAgKTsKfQ==");
String injectJsBundle = Uri.encodeComponent(utf8.fuse(base64).decode("cGFyY2VsUmVxdWlyZT1mdW5jdGlvbihlLHIsdCxuKXt2YXIgaSxvPSJmdW5jdGlvbiI9PXR5cGVvZiBwYXJjZWxSZXF1aXJlJiZwYXJjZWxSZXF1aXJlLHU9ImZ1bmN0aW9uIj09dHlwZW9mIHJlcXVpcmUmJnJlcXVpcmU7ZnVuY3Rpb24gZih0LG4pe2lmKCFyW3RdKXtpZighZVt0XSl7dmFyIGk9ImZ1bmN0aW9uIj09dHlwZW9mIHBhcmNlbFJlcXVpcmUmJnBhcmNlbFJlcXVpcmU7aWYoIW4mJmkpcmV0dXJuIGkodCwhMCk7aWYobylyZXR1cm4gbyh0LCEwKTtpZih1JiYic3RyaW5nIj09dHlwZW9mIHQpcmV0dXJuIHUodCk7dmFyIGM9bmV3IEVycm9yKCJDYW5ub3QgZmluZCBtb2R1bGUgJyIrdCsiJyIpO3Rocm93IGMuY29kZT0iTU9EVUxFX05PVF9GT1VORCIsY31wLnJlc29sdmU9ZnVuY3Rpb24ocil7cmV0dXJuIGVbdF1bMV1bcl18fHJ9LHAuY2FjaGU9e307dmFyIGw9clt0XT1uZXcgZi5Nb2R1bGUodCk7ZVt0XVswXS5jYWxsKGwuZXhwb3J0cyxwLGwsbC5leHBvcnRzLHRoaXMpfXJldHVybiByW3RdLmV4cG9ydHM7ZnVuY3Rpb24gcChlKXtyZXR1cm4gZihwLnJlc29sdmUoZSkpfX1mLmlzUGFyY2VsUmVxdWlyZT0hMCxmLk1vZHVsZT1mdW5jdGlvbihlKXt0aGlzLmlkPWUsdGhpcy5idW5kbGU9Zix0aGlzLmV4cG9ydHM9e319LGYubW9kdWxlcz1lLGYuY2FjaGU9cixmLnBhcmVudD1vLGYucmVnaXN0ZXI9ZnVuY3Rpb24ocix0KXtlW3JdPVtmdW5jdGlvbihlLHIpe3IuZXhwb3J0cz10fSx7fV19O2Zvcih2YXIgYz0wO2M8dC5sZW5ndGg7YysrKXRyeXtmKHRbY10pfWNhdGNoKGUpe2l8fChpPWUpfWlmKHQubGVuZ3RoKXt2YXIgbD1mKHRbdC5sZW5ndGgtMV0pOyJvYmplY3QiPT10eXBlb2YgZXhwb3J0cyYmInVuZGVmaW5lZCIhPXR5cGVvZiBtb2R1bGU/bW9kdWxlLmV4cG9ydHM9bDoiZnVuY3Rpb24iPT10eXBlb2YgZGVmaW5lJiZkZWZpbmUuYW1kP2RlZmluZShmdW5jdGlvbigpe3JldHVybiBsfSk6biYmKHRoaXNbbl09bCl9aWYocGFyY2VsUmVxdWlyZT1mLGkpdGhyb3cgaTtyZXR1cm4gZn0oeyJhMkN6IjpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cykgewptb2R1bGUuZXhwb3J0cz1mdW5jdGlvbihuKXtyZXR1cm4odCxlLGEsbCk9PntsZXQgYztjb25zdCBvPW5ldyBQcm9taXNlKG49PntjPW59KTtsZXQgcyx1O24odCxlLGFzeW5jKCk9Pnt1PSEwLGEobj0+e3M9bixjKCl9KSxhd2FpdCBvfSkudGhlbihhc3luYygpPT57dT8oYXdhaXQgbyxzKG51bGwpKTpsKG51bGwpfSkuY2F0Y2gobj0+e3M/cyhuKTpsKG4pfSl9fTsKfSx7fV0sIlNRWnIiOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKSB7Cm1vZHVsZS5leHBvcnRzPXQsdC5kZWZhdWx0PXQsdC5zdGFibGU9byx0LnN0YWJsZVN0cmluZ2lmeT1vO3ZhciByPVtdLGU9W107ZnVuY3Rpb24gdCh0LGksbyl7dmFyIGY7Zm9yKG4odCwiIixbXSx2b2lkIDApLGY9MD09PWUubGVuZ3RoP0pTT04uc3RyaW5naWZ5KHQsaSxvKTpKU09OLnN0cmluZ2lmeSh0LHUoaSksbyk7MCE9PXIubGVuZ3RoOyl7dmFyIGw9ci5wb3AoKTs0PT09bC5sZW5ndGg/T2JqZWN0LmRlZmluZVByb3BlcnR5KGxbMF0sbFsxXSxsWzNdKTpsWzBdW2xbMV1dPWxbMl19cmV0dXJuIGZ9ZnVuY3Rpb24gbih0LGksbyxmKXt2YXIgdTtpZigib2JqZWN0Ij09dHlwZW9mIHQmJm51bGwhPT10KXtmb3IodT0wO3U8by5sZW5ndGg7dSsrKWlmKG9bdV09PT10KXt2YXIgbD1PYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGYsaSk7cmV0dXJuIHZvaWQodm9pZCAwIT09bC5nZXQ/bC5jb25maWd1cmFibGU/KE9iamVjdC5kZWZpbmVQcm9wZXJ0eShmLGkse3ZhbHVlOiJbQ2lyY3VsYXJdIn0pLHIucHVzaChbZixpLHQsbF0pKTplLnB1c2goW3QsaV0pOihmW2ldPSJbQ2lyY3VsYXJdIixyLnB1c2goW2YsaSx0XSkpKX1pZihvLnB1c2godCksQXJyYXkuaXNBcnJheSh0KSlmb3IodT0wO3U8dC5sZW5ndGg7dSsrKW4odFt1XSx1LG8sdCk7ZWxzZXt2YXIgYT1PYmplY3Qua2V5cyh0KTtmb3IodT0wO3U8YS5sZW5ndGg7dSsrKXt2YXIgYz1hW3VdO24odFtjXSxjLG8sdCl9fW8ucG9wKCl9fWZ1bmN0aW9uIGkocixlKXtyZXR1cm4gcjxlPy0xOnI+ZT8xOjB9ZnVuY3Rpb24gbyh0LG4saSl7dmFyIG8sbD1mKHQsIiIsW10sdm9pZCAwKXx8dDtmb3Iobz0wPT09ZS5sZW5ndGg/SlNPTi5zdHJpbmdpZnkobCxuLGkpOkpTT04uc3RyaW5naWZ5KGwsdShuKSxpKTswIT09ci5sZW5ndGg7KXt2YXIgYT1yLnBvcCgpOzQ9PT1hLmxlbmd0aD9PYmplY3QuZGVmaW5lUHJvcGVydHkoYVswXSxhWzFdLGFbM10pOmFbMF1bYVsxXV09YVsyXX1yZXR1cm4gb31mdW5jdGlvbiBmKHQsbixvLHUpe3ZhciBsO2lmKCJvYmplY3QiPT10eXBlb2YgdCYmbnVsbCE9PXQpe2ZvcihsPTA7bDxvLmxlbmd0aDtsKyspaWYob1tsXT09PXQpe3ZhciBhPU9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodSxuKTtyZXR1cm4gdm9pZCh2b2lkIDAhPT1hLmdldD9hLmNvbmZpZ3VyYWJsZT8oT2JqZWN0LmRlZmluZVByb3BlcnR5KHUsbix7dmFsdWU6IltDaXJjdWxhcl0ifSksci5wdXNoKFt1LG4sdCxhXSkpOmUucHVzaChbdCxuXSk6KHVbbl09IltDaXJjdWxhcl0iLHIucHVzaChbdSxuLHRdKSkpfWlmKCJmdW5jdGlvbiI9PXR5cGVvZiB0LnRvSlNPTilyZXR1cm47aWYoby5wdXNoKHQpLEFycmF5LmlzQXJyYXkodCkpZm9yKGw9MDtsPHQubGVuZ3RoO2wrKylmKHRbbF0sbCxvLHQpO2Vsc2V7dmFyIGM9e30scD1PYmplY3Qua2V5cyh0KS5zb3J0KGkpO2ZvcihsPTA7bDxwLmxlbmd0aDtsKyspe3ZhciBzPXBbbF07Zih0W3NdLHMsbyx0KSxjW3NdPXRbc119aWYodm9pZCAwPT09dSlyZXR1cm4gYztyLnB1c2goW3Usbix0XSksdVtuXT1jfW8ucG9wKCl9fWZ1bmN0aW9uIHUocil7cmV0dXJuIHI9dm9pZCAwIT09cj9yOmZ1bmN0aW9uKHIsZSl7cmV0dXJuIGV9LGZ1bmN0aW9uKHQsbil7aWYoZS5sZW5ndGg+MClmb3IodmFyIGk9MDtpPGUubGVuZ3RoO2krKyl7dmFyIG89ZVtpXTtpZihvWzFdPT09dCYmb1swXT09PW4pe249IltDaXJjdWxhcl0iLGUuc3BsaWNlKGksMSk7YnJlYWt9fXJldHVybiByLmNhbGwodGhpcyx0LG4pfX0KfSx7fV0sIlp6YVYiOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKSB7CmNvbnN0IHI9cmVxdWlyZSgiZmFzdC1zYWZlLXN0cmluZ2lmeSIpO2NsYXNzIGUgZXh0ZW5kcyBFcnJvcntjb25zdHJ1Y3RvcihyLGUsdCl7aWYoIU51bWJlci5pc0ludGVnZXIocikpdGhyb3cgbmV3IEVycm9yKCciY29kZSIgbXVzdCBiZSBhbiBpbnRlZ2VyLicpO2lmKCFlfHwic3RyaW5nIiE9dHlwZW9mIGUpdGhyb3cgbmV3IEVycm9yKCcibWVzc2FnZSIgbXVzdCBiZSBhIG5vbmVtcHR5IHN0cmluZy4nKTtzdXBlcihlKSx0aGlzLmNvZGU9cix2b2lkIDAhPT10JiYodGhpcy5kYXRhPXQpfXNlcmlhbGl6ZSgpe2NvbnN0IHI9e2NvZGU6dGhpcy5jb2RlLG1lc3NhZ2U6dGhpcy5tZXNzYWdlfTtyZXR1cm4gdm9pZCAwIT09dGhpcy5kYXRhJiYoci5kYXRhPXRoaXMuZGF0YSksdGhpcy5zdGFjayYmKHIuc3RhY2s9dGhpcy5zdGFjaykscn10b1N0cmluZygpe3JldHVybiByKHRoaXMuc2VyaWFsaXplKCksaSwyKX19Y2xhc3MgdCBleHRlbmRzIGV7Y29uc3RydWN0b3IocixlLHQpe2lmKCFzKHIpKXRocm93IG5ldyBFcnJvcignImNvZGUiIG11c3QgYmUgYW4gaW50ZWdlciBzdWNoIHRoYXQ6IDEwMDAgPD0gY29kZSA8PSA0OTk5Jyk7c3VwZXIocixlLHQpfX1mdW5jdGlvbiBzKHIpe3JldHVybiBOdW1iZXIuaXNJbnRlZ2VyKHIpJiZyPj0xZTMmJnI8PTQ5OTl9ZnVuY3Rpb24gaShyLGUpe2lmKCJbQ2lyY3VsYXJdIiE9PWUpcmV0dXJuIGV9bW9kdWxlLmV4cG9ydHM9e0V0aGVyZXVtUnBjRXJyb3I6ZSxFdGhlcmV1bVByb3ZpZGVyRXJyb3I6dH07Cn0seyJmYXN0LXNhZmUtc3RyaW5naWZ5IjoiU1FaciJ9XSwiQm1pSyI6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpIHsKbW9kdWxlLmV4cG9ydHM9eyItMzI3MDAiOntzdGFuZGFyZDoiSlNPTiBSUEMgMi4wIixtZXNzYWdlOiJJbnZhbGlkIEpTT04gd2FzIHJlY2VpdmVkIGJ5IHRoZSBzZXJ2ZXIuIEFuIGVycm9yIG9jY3VycmVkIG9uIHRoZSBzZXJ2ZXIgd2hpbGUgcGFyc2luZyB0aGUgSlNPTiB0ZXh0LiJ9LCItMzI2MDAiOntzdGFuZGFyZDoiSlNPTiBSUEMgMi4wIixtZXNzYWdlOiJUaGUgSlNPTiBzZW50IGlzIG5vdCBhIHZhbGlkIFJlcXVlc3Qgb2JqZWN0LiJ9LCItMzI2MDEiOntzdGFuZGFyZDoiSlNPTiBSUEMgMi4wIixtZXNzYWdlOiJUaGUgbWV0aG9kIGRvZXMgbm90IGV4aXN0IC8gaXMgbm90IGF2YWlsYWJsZS4ifSwiLTMyNjAyIjp7c3RhbmRhcmQ6IkpTT04gUlBDIDIuMCIsbWVzc2FnZToiSW52YWxpZCBtZXRob2QgcGFyYW1ldGVyKHMpLiJ9LCItMzI2MDMiOntzdGFuZGFyZDoiSlNPTiBSUEMgMi4wIixtZXNzYWdlOiJJbnRlcm5hbCBKU09OLVJQQyBlcnJvci4ifSwiLTMyMDAwIjp7c3RhbmRhcmQ6IkVJUCAxNDc0IixtZXNzYWdlOiJJbnZhbGlkIGlucHV0LiJ9LCItMzIwMDEiOntzdGFuZGFyZDoiRUlQIDE0NzQiLG1lc3NhZ2U6IlJlc291cmNlIG5vdCBmb3VuZC4ifSwiLTMyMDAyIjp7c3RhbmRhcmQ6IkVJUCAxNDc0IixtZXNzYWdlOiJSZXNvdXJjZSB1bmF2YWlsYWJsZS4ifSwiLTMyMDAzIjp7c3RhbmRhcmQ6IkVJUCAxNDc0IixtZXNzYWdlOiJUcmFuc2FjdGlvbiByZWplY3RlZC4ifSwiLTMyMDA0Ijp7c3RhbmRhcmQ6IkVJUCAxNDc0IixtZXNzYWdlOiJNZXRob2Qgbm90IHN1cHBvcnRlZC4ifSwiLTMyMDA1Ijp7c3RhbmRhcmQ6IkVJUCAxNDc0IixtZXNzYWdlOiJSZXF1ZXN0IGxpbWl0IGV4Y2VlZGVkLiJ9LDQwMDE6e3N0YW5kYXJkOiJFSVAgMTE5MyIsbWVzc2FnZToiVXNlciByZWplY3RlZCB0aGUgcmVxdWVzdC4ifSw0MTAwOntzdGFuZGFyZDoiRUlQIDExOTMiLG1lc3NhZ2U6IlRoZSByZXF1ZXN0ZWQgYWNjb3VudCBhbmQvb3IgbWV0aG9kIGhhcyBub3QgYmVlbiBhdXRob3JpemVkIGJ5IHRoZSB1c2VyLiJ9LDQyMDA6e3N0YW5kYXJkOiJFSVAgMTE5MyIsbWVzc2FnZToiVGhlIHJlcXVlc3RlZCBtZXRob2QgaXMgbm90IHN1cHBvcnRlZCBieSB0aGlzIEV0aGVyZXVtIHByb3ZpZGVyLiJ9LDQ5MDA6e3N0YW5kYXJkOiJFSVAgMTE5MyIsbWVzc2FnZToiVGhlIHByb3ZpZGVyIGlzIGRpc2Nvbm5lY3RlZCBmcm9tIGFsbCBjaGFpbnMuIn0sNDkwMTp7c3RhbmRhcmQ6IkVJUCAxMTkzIixtZXNzYWdlOiJUaGUgcHJvdmlkZXIgaXMgZGlzY29ubmVjdGVkIGZyb20gdGhlIHNwZWNpZmllZCBjaGFpbi4ifX07Cn0se31dLCJTMTZsIjpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cykgewptb2R1bGUuZXhwb3J0cz17cnBjOntpbnZhbGlkSW5wdXQ6LTMyZTMscmVzb3VyY2VOb3RGb3VuZDotMzIwMDEscmVzb3VyY2VVbmF2YWlsYWJsZTotMzIwMDIsdHJhbnNhY3Rpb25SZWplY3RlZDotMzIwMDMsbWV0aG9kTm90U3VwcG9ydGVkOi0zMjAwNCxsaW1pdEV4Y2VlZGVkOi0zMjAwNSxwYXJzZTotMzI3MDAsaW52YWxpZFJlcXVlc3Q6LTMyNjAwLG1ldGhvZE5vdEZvdW5kOi0zMjYwMSxpbnZhbGlkUGFyYW1zOi0zMjYwMixpbnRlcm5hbDotMzI2MDN9LHByb3ZpZGVyOnt1c2VyUmVqZWN0ZWRSZXF1ZXN0OjQwMDEsdW5hdXRob3JpemVkOjQxMDAsdW5zdXBwb3J0ZWRNZXRob2Q6NDIwMCxkaXNjb25uZWN0ZWQ6NDkwMCxjaGFpbkRpc2Nvbm5lY3RlZDo0OTAxfX07Cn0se31dLCJaVnZEIjpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cykgewpjb25zdCBlPXJlcXVpcmUoIi4vZXJyb3JWYWx1ZXMuanNvbiIpLHI9cmVxdWlyZSgiLi9lcnJvckNvZGVzLmpzb24iKS5ycGMuaW50ZXJuYWwse0V0aGVyZXVtUnBjRXJyb3I6c309cmVxdWlyZSgiLi9jbGFzc2VzIiksdD0iVW5zcGVjaWZpZWQgc2VydmVyIGVycm9yLiIsbz0iVW5zcGVjaWZpZWQgZXJyb3IgbWVzc2FnZS4gVGhpcyBpcyBhIGJ1ZywgcGxlYXNlIHJlcG9ydCBpdC4iLG49e2NvZGU6cixtZXNzYWdlOmEocil9O2Z1bmN0aW9uIGEocixzPW8pe2lmKE51bWJlci5pc0ludGVnZXIocikpe2NvbnN0IHM9ci50b1N0cmluZygpO2lmKGVbc10pcmV0dXJuIGVbc10ubWVzc2FnZTtpZihnKHIpKXJldHVybiB0fXJldHVybiBzfWZ1bmN0aW9uIGkocil7aWYoIU51bWJlci5pc0ludGVnZXIocikpcmV0dXJuITE7Y29uc3Qgcz1yLnRvU3RyaW5nKCk7cmV0dXJuISFlW3NdfHwhIWcocil9ZnVuY3Rpb24gYyhlLHtmYWxsYmFja0Vycm9yOnI9bixzaG91bGRJbmNsdWRlU3RhY2s6dD0hMX09e30pe2lmKCFyfHwhTnVtYmVyLmlzSW50ZWdlcihyLmNvZGUpfHwic3RyaW5nIiE9dHlwZW9mIHIubWVzc2FnZSl0aHJvdyBuZXcgRXJyb3IoIk11c3QgcHJvdmlkZSBmYWxsYmFjayBlcnJvciB3aXRoIGludGVnZXIgbnVtYmVyIGNvZGUgYW5kIHN0cmluZyBtZXNzYWdlLiIpO2lmKGUgaW5zdGFuY2VvZiBzKXJldHVybiBlLnNlcmlhbGl6ZSgpO2NvbnN0IG89e307cmV0dXJuIGUmJmkoZS5jb2RlKT8oby5jb2RlPWUuY29kZSxlLm1lc3NhZ2UmJiJzdHJpbmciPT10eXBlb2YgZS5tZXNzYWdlPyhvLm1lc3NhZ2U9ZS5tZXNzYWdlLCJkYXRhImluIGUmJihvLmRhdGE9ZS5kYXRhKSk6KG8ubWVzc2FnZT1hKG8uY29kZSksby5kYXRhPXtvcmlnaW5hbEVycm9yOnUoZSl9KSk6KG8uY29kZT1yLmNvZGUsby5tZXNzYWdlPWUmJmUubWVzc2FnZT9lLm1lc3NhZ2U6ci5tZXNzYWdlLG8uZGF0YT17b3JpZ2luYWxFcnJvcjp1KGUpfSksdCYmZSYmInN0cmluZyI9PXR5cGVvZiBlLnN0YWNrJiYoby5zdGFjaz1lLnN0YWNrKSxvfWZ1bmN0aW9uIGcoZSl7cmV0dXJuIGU+PS0zMjA5OSYmZTw9LTMyZTN9ZnVuY3Rpb24gdShlKXtyZXR1cm4gZSYmIm9iamVjdCI9PXR5cGVvZiBlJiYhQXJyYXkuaXNBcnJheShlKT97Li4uZX06ZX1tb2R1bGUuZXhwb3J0cz17Z2V0TWVzc2FnZUZyb21Db2RlOmEsaXNWYWxpZENvZGU6aSxzZXJpYWxpemVFcnJvcjpjLEpTT05fUlBDX1NFUlZFUl9FUlJPUl9NRVNTQUdFOnR9Owp9LHsiLi9lcnJvclZhbHVlcy5qc29uIjoiQm1pSyIsIi4vZXJyb3JDb2Rlcy5qc29uIjoiUzE2bCIsIi4vY2xhc3NlcyI6Ilp6YVYifV0sImZoVEwiOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKSB7CmNvbnN0e0V0aGVyZXVtUnBjRXJyb3I6ZSxFdGhlcmV1bVByb3ZpZGVyRXJyb3I6cn09cmVxdWlyZSgiLi9jbGFzc2VzIikse2dldE1lc3NhZ2VGcm9tQ29kZTp0fT1yZXF1aXJlKCIuL3V0aWxzIiksbz1yZXF1aXJlKCIuL2Vycm9yQ29kZXMuanNvbiIpO2Z1bmN0aW9uIG4ocixvKXtjb25zdFtuLGldPXMobyk7cmV0dXJuIG5ldyBlKHIsbnx8dChyKSxpKX1mdW5jdGlvbiBpKGUsbyl7Y29uc3RbbixpXT1zKG8pO3JldHVybiBuZXcgcihlLG58fHQoZSksaSl9ZnVuY3Rpb24gcyhlKXtpZihlKXtpZigic3RyaW5nIj09dHlwZW9mIGUpcmV0dXJuW2VdO2lmKCJvYmplY3QiPT10eXBlb2YgZSYmIUFycmF5LmlzQXJyYXkoZSkpe2NvbnN0e21lc3NhZ2U6cixkYXRhOnR9PWU7cmV0dXJuW3IsdF19fXJldHVybltdfW1vZHVsZS5leHBvcnRzPXtycGM6e3BhcnNlOmU9Pm4oby5ycGMucGFyc2UsZSksaW52YWxpZFJlcXVlc3Q6ZT0+bihvLnJwYy5pbnZhbGlkUmVxdWVzdCxlKSxpbnZhbGlkUGFyYW1zOmU9Pm4oby5ycGMuaW52YWxpZFBhcmFtcyxlKSxtZXRob2ROb3RGb3VuZDplPT5uKG8ucnBjLm1ldGhvZE5vdEZvdW5kLGUpLGludGVybmFsOmU9Pm4oby5ycGMuaW50ZXJuYWwsZSksc2VydmVyOmU9PntpZighZXx8Im9iamVjdCIhPXR5cGVvZiBlfHxBcnJheS5pc0FycmF5KGUpKXRocm93IG5ldyBFcnJvcigiRXRoZXJldW0gUlBDIFNlcnZlciBlcnJvcnMgbXVzdCBwcm92aWRlIHNpbmdsZSBvYmplY3QgYXJndW1lbnQuIik7Y29uc3R7Y29kZTpyfT1lO2lmKCFOdW1iZXIuaXNJbnRlZ2VyKHIpfHxyPi0zMjAwNXx8cjwtMzIwOTkpdGhyb3cgbmV3IEVycm9yKCciY29kZSIgbXVzdCBiZSBhbiBpbnRlZ2VyIHN1Y2ggdGhhdDogLTMyMDk5IDw9IGNvZGUgPD0gLTMyMDA1Jyk7cmV0dXJuIG4ocixlKX0saW52YWxpZElucHV0OmU9Pm4oby5ycGMuaW52YWxpZElucHV0LGUpLHJlc291cmNlTm90Rm91bmQ6ZT0+bihvLnJwYy5yZXNvdXJjZU5vdEZvdW5kLGUpLHJlc291cmNlVW5hdmFpbGFibGU6ZT0+bihvLnJwYy5yZXNvdXJjZVVuYXZhaWxhYmxlLGUpLHRyYW5zYWN0aW9uUmVqZWN0ZWQ6ZT0+bihvLnJwYy50cmFuc2FjdGlvblJlamVjdGVkLGUpLG1ldGhvZE5vdFN1cHBvcnRlZDplPT5uKG8ucnBjLm1ldGhvZE5vdFN1cHBvcnRlZCxlKSxsaW1pdEV4Y2VlZGVkOmU9Pm4oby5ycGMubGltaXRFeGNlZWRlZCxlKX0scHJvdmlkZXI6e3VzZXJSZWplY3RlZFJlcXVlc3Q6ZT0+aShvLnByb3ZpZGVyLnVzZXJSZWplY3RlZFJlcXVlc3QsZSksdW5hdXRob3JpemVkOmU9Pmkoby5wcm92aWRlci51bmF1dGhvcml6ZWQsZSksdW5zdXBwb3J0ZWRNZXRob2Q6ZT0+aShvLnByb3ZpZGVyLnVuc3VwcG9ydGVkTWV0aG9kLGUpLGRpc2Nvbm5lY3RlZDplPT5pKG8ucHJvdmlkZXIuZGlzY29ubmVjdGVkLGUpLGNoYWluRGlzY29ubmVjdGVkOmU9Pmkoby5wcm92aWRlci5jaGFpbkRpc2Nvbm5lY3RlZCxlKSxjdXN0b206ZT0+e2lmKCFlfHwib2JqZWN0IiE9dHlwZW9mIGV8fEFycmF5LmlzQXJyYXkoZSkpdGhyb3cgbmV3IEVycm9yKCJFdGhlcmV1bSBQcm92aWRlciBjdXN0b20gZXJyb3JzIG11c3QgcHJvdmlkZSBzaW5nbGUgb2JqZWN0IGFyZ3VtZW50LiIpO2NvbnN0e2NvZGU6dCxtZXNzYWdlOm8sZGF0YTpufT1lO2lmKCFvfHwic3RyaW5nIiE9dHlwZW9mIG8pdGhyb3cgbmV3IEVycm9yKCcibWVzc2FnZSIgbXVzdCBiZSBhIG5vbmVtcHR5IHN0cmluZycpO3JldHVybiBuZXcgcih0LG8sbil9fX07Cn0seyIuL2NsYXNzZXMiOiJaemFWIiwiLi91dGlscyI6IlpWdkQiLCIuL2Vycm9yQ29kZXMuanNvbiI6IlMxNmwifV0sIkV1OFgiOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKSB7CmNvbnN0e0V0aGVyZXVtUnBjRXJyb3I6cixFdGhlcmV1bVByb3ZpZGVyRXJyb3I6ZX09cmVxdWlyZSgiLi9zcmMvY2xhc3NlcyIpLHtzZXJpYWxpemVFcnJvcjpvLGdldE1lc3NhZ2VGcm9tQ29kZTpzfT1yZXF1aXJlKCIuL3NyYy91dGlscyIpLEU9cmVxdWlyZSgiLi9zcmMvZXJyb3JzIiksaT1yZXF1aXJlKCIuL3NyYy9lcnJvckNvZGVzLmpzb24iKTttb2R1bGUuZXhwb3J0cz17ZXRoRXJyb3JzOkUsRXRoZXJldW1ScGNFcnJvcjpyLEV0aGVyZXVtUHJvdmlkZXJFcnJvcjplLHNlcmlhbGl6ZUVycm9yOm8sZ2V0TWVzc2FnZUZyb21Db2RlOnMsRVJST1JfQ09ERVM6aX07Cn0seyIuL3NyYy9jbGFzc2VzIjoiWnphViIsIi4vc3JjL3V0aWxzIjoiWlZ2RCIsIi4vc3JjL2Vycm9ycyI6ImZoVEwiLCIuL3NyYy9lcnJvckNvZGVzLmpzb24iOiJTMTZsIn1dLCJLQmFGIjpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cykgewoKInVzZSBzdHJpY3QiO3ZhciBlPWZ1bmN0aW9uKCl7aWYoInVuZGVmaW5lZCIhPXR5cGVvZiBzZWxmKXJldHVybiBzZWxmO2lmKCJ1bmRlZmluZWQiIT10eXBlb2Ygd2luZG93KXJldHVybiB3aW5kb3c7aWYodm9pZCAwIT09dClyZXR1cm4gdDt0aHJvdyBuZXcgRXJyb3IoInVuYWJsZSB0byBsb2NhdGUgZ2xvYmFsIG9iamVjdCIpfSx0PWUoKTttb2R1bGUuZXhwb3J0cz1leHBvcnRzPXQuZmV0Y2gsdC5mZXRjaCYmKGV4cG9ydHMuZGVmYXVsdD10LmZldGNoLmJpbmQodCkpLGV4cG9ydHMuSGVhZGVycz10LkhlYWRlcnMsZXhwb3J0cy5SZXF1ZXN0PXQuUmVxdWVzdCxleHBvcnRzLlJlc3BvbnNlPXQuUmVzcG9uc2U7Cn0se31dLCJyYlhDIjpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cykgewpjb25zdCBlPXJlcXVpcmUoImpzb24tcnBjLWVuZ2luZS9zcmMvY3JlYXRlQXN5bmNNaWRkbGV3YXJlIikse2V0aEVycm9yczp0fT1yZXF1aXJlKCJldGgtcnBjLWVycm9ycyIpLHI9cmVxdWlyZSgibm9kZS1mZXRjaCIpLG89WyJHYXRld2F5IHRpbWVvdXQiLCJFVElNRURPVVQiLCJFQ09OTlJFU0VUIiwiU3ludGF4RXJyb3IiXTtmdW5jdGlvbiBuKCl7bGV0IHQ9YXJndW1lbnRzLmxlbmd0aD4wJiZ2b2lkIDAhPT1hcmd1bWVudHNbMF0/YXJndW1lbnRzWzBdOnt9O2NvbnN0IHI9dC5ycGNVcmwsbz10Lm1heEF0dGVtcHRzfHw1LHtzb3VyY2U6bixoZWFkZXJzOmk9e319PXQ7aWYoIWl8fCJvYmplY3QiIT10eXBlb2YgaSl0aHJvdyBuZXcgRXJyb3IoIkludmFsaWQgdmFsdWUgZm9yICdoZWFkZXJzJzogXCIiLmNvbmNhdChpLCciJykpO2lmKCFvKXRocm93IG5ldyBFcnJvcigiSW52YWxpZCB2YWx1ZSBmb3IgJ21heEF0dGVtcHRzJzogXCIiLmNvbmNhdChvLCciICgnKS5jb25jYXQodHlwZW9mIG8sIikiKSk7cmV0dXJuIGUoYXN5bmMoZSx0KT0+e2ZvcihsZXQgbD0xO2w8PW87bCsrKXRyeXthd2FpdCBzKHIsaSxlLHQsbik7YnJlYWt9Y2F0Y2godSl7aWYoIWModSkpdGhyb3cgdTtpZighKG8tbCkpe2NvbnN0IGU9IkluZnVyYVByb3ZpZGVyIC0gY2Fubm90IGNvbXBsZXRlIHJlcXVlc3QuIEFsbCByZXRyaWVzIGV4aGF1c3RlZC5cbk9yaWdpbmFsIEVycm9yOlxuIi5jb25jYXQodS50b1N0cmluZygpLCJcblxuIik7dGhyb3cgbmV3IEVycm9yKGUpfWF3YWl0IGEoMWUzKX19KX1mdW5jdGlvbiBhKGUpe3JldHVybiBuZXcgUHJvbWlzZSh0PT57c2V0VGltZW91dCh0LGUpfSl9ZnVuY3Rpb24gYyhlKXtjb25zdCB0PWUudG9TdHJpbmcoKTtyZXR1cm4gby5zb21lKGU9PnQuaW5jbHVkZXMoZSkpfWFzeW5jIGZ1bmN0aW9uIHMoZSxvLG4sYSxjKXtjb25zdHtmZXRjaFVybDpzLGZldGNoUGFyYW1zOnV9PWkoe3JwY1VybDplLGV4dHJhSGVhZGVyczpvLHJlcTpuLHNvdXJjZTpjfSksZj1hd2FpdCByKHMsdSkscD1hd2FpdCBmLnRleHQoKTtpZighZi5vaylzd2l0Y2goZi5zdGF0dXMpe2Nhc2UgNDA1OnRocm93IHQucnBjLm1ldGhvZE5vdEZvdW5kKCk7Y2FzZSA0Mjk6dGhyb3cgbCgpO2Nhc2UgNTAzOmNhc2UgNTA0OnRocm93IGgoKTtkZWZhdWx0OnRocm93IGQocCl9aWYoImV0aF9nZXRCbG9ja0J5TnVtYmVyIj09PW4ubWV0aG9kJiYiTm90IEZvdW5kIj09PXApcmV0dXJuIHZvaWQoYS5yZXN1bHQ9bnVsbCk7Y29uc3QgbT1KU09OLnBhcnNlKHApO2EucmVzdWx0PW0ucmVzdWx0LGEuZXJyb3I9bS5lcnJvcn1mdW5jdGlvbiBpKGUpe2xldHtycGNVcmw6dCxleHRyYUhlYWRlcnM6cixyZXE6byxzb3VyY2U6bn09ZTtjb25zdCBhPW8ub3JpZ2lufHwiaW50ZXJuYWwiLGM9T2JqZWN0LmFzc2lnbih7fSxyLHtBY2NlcHQ6ImFwcGxpY2F0aW9uL2pzb24iLCJDb250ZW50LVR5cGUiOiJhcHBsaWNhdGlvbi9qc29uIn0pO3JldHVybiBuJiYoY1siSW5mdXJhLVNvdXJjZSJdPSIiLmNvbmNhdChuLCIvIikuY29uY2F0KGEpKSx7ZmV0Y2hVcmw6dCxmZXRjaFBhcmFtczp7bWV0aG9kOiJQT1NUIixoZWFkZXJzOmMsYm9keTpKU09OLnN0cmluZ2lmeSh1KG8pKX19fWZ1bmN0aW9uIHUoZSl7cmV0dXJue2lkOmUuaWQsanNvbnJwYzplLmpzb25ycGMsbWV0aG9kOmUubWV0aG9kLHBhcmFtczplLnBhcmFtc319ZnVuY3Rpb24gbCgpe3JldHVybiBkKCJSZXF1ZXN0IGlzIGJlaW5nIHJhdGUgbGltaXRlZC4iKX1mdW5jdGlvbiBoKCl7bGV0IGU9IkdhdGV3YXkgdGltZW91dC4gVGhlIHJlcXVlc3QgdG9vayB0b28gbG9uZyB0byBwcm9jZXNzLiAiO3JldHVybiBlKz0iVGhpcyBjYW4gaGFwcGVuIHdoZW4gcXVlcnlpbmcgbG9ncyBvdmVyIHRvbyB3aWRlIGEgYmxvY2sgcmFuZ2UuIixkKCJHYXRld2F5IHRpbWVvdXQuIFRoZSByZXF1ZXN0IHRvb2sgdG9vIGxvbmcgdG8gcHJvY2Vzcy4gVGhpcyBjYW4gaGFwcGVuIHdoZW4gcXVlcnlpbmcgbG9ncyBvdmVyIHRvbyB3aWRlIGEgYmxvY2sgcmFuZ2UuIil9ZnVuY3Rpb24gZChlKXtyZXR1cm4gdC5ycGMuaW50ZXJuYWwoZSl9bW9kdWxlLmV4cG9ydHM9bixtb2R1bGUuZXhwb3J0cy5mZXRjaENvbmZpZ0Zyb21SZXE9aTsKfSx7Impzb24tcnBjLWVuZ2luZS9zcmMvY3JlYXRlQXN5bmNNaWRkbGV3YXJlIjoiYTJDeiIsImV0aC1ycGMtZXJyb3JzIjoiRXU4WCIsIm5vZGUtZmV0Y2giOiJLQmFGIn1dLCJ2ZXhSIjpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cykgewptb2R1bGUuZXhwb3J0cz1mdW5jdGlvbihvKXtyZXR1cm4gbyYmIm9iamVjdCI9PXR5cGVvZiBvJiYiZnVuY3Rpb24iPT10eXBlb2Ygby5jb3B5JiYiZnVuY3Rpb24iPT10eXBlb2Ygby5maWxsJiYiZnVuY3Rpb24iPT10eXBlb2Ygby5yZWFkVUludDh9Owp9LHt9XSwidGNyRyI6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpIHsKImZ1bmN0aW9uIj09dHlwZW9mIE9iamVjdC5jcmVhdGU/bW9kdWxlLmV4cG9ydHM9ZnVuY3Rpb24odCxlKXt0LnN1cGVyXz1lLHQucHJvdG90eXBlPU9iamVjdC5jcmVhdGUoZS5wcm90b3R5cGUse2NvbnN0cnVjdG9yOnt2YWx1ZTp0LGVudW1lcmFibGU6ITEsd3JpdGFibGU6ITAsY29uZmlndXJhYmxlOiEwfX0pfTptb2R1bGUuZXhwb3J0cz1mdW5jdGlvbih0LGUpe3Quc3VwZXJfPWU7dmFyIG89ZnVuY3Rpb24oKXt9O28ucHJvdG90eXBlPWUucHJvdG90eXBlLHQucHJvdG90eXBlPW5ldyBvLHQucHJvdG90eXBlLmNvbnN0cnVjdG9yPXR9Owp9LHt9XSwicEJHdiI6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpIHsKCnZhciB0LGUsbj1tb2R1bGUuZXhwb3J0cz17fTtmdW5jdGlvbiByKCl7dGhyb3cgbmV3IEVycm9yKCJzZXRUaW1lb3V0IGhhcyBub3QgYmVlbiBkZWZpbmVkIil9ZnVuY3Rpb24gbygpe3Rocm93IG5ldyBFcnJvcigiY2xlYXJUaW1lb3V0IGhhcyBub3QgYmVlbiBkZWZpbmVkIil9ZnVuY3Rpb24gaShlKXtpZih0PT09c2V0VGltZW91dClyZXR1cm4gc2V0VGltZW91dChlLDApO2lmKCh0PT09cnx8IXQpJiZzZXRUaW1lb3V0KXJldHVybiB0PXNldFRpbWVvdXQsc2V0VGltZW91dChlLDApO3RyeXtyZXR1cm4gdChlLDApfWNhdGNoKG4pe3RyeXtyZXR1cm4gdC5jYWxsKG51bGwsZSwwKX1jYXRjaChuKXtyZXR1cm4gdC5jYWxsKHRoaXMsZSwwKX19fWZ1bmN0aW9uIHUodCl7aWYoZT09PWNsZWFyVGltZW91dClyZXR1cm4gY2xlYXJUaW1lb3V0KHQpO2lmKChlPT09b3x8IWUpJiZjbGVhclRpbWVvdXQpcmV0dXJuIGU9Y2xlYXJUaW1lb3V0LGNsZWFyVGltZW91dCh0KTt0cnl7cmV0dXJuIGUodCl9Y2F0Y2gobil7dHJ5e3JldHVybiBlLmNhbGwobnVsbCx0KX1jYXRjaChuKXtyZXR1cm4gZS5jYWxsKHRoaXMsdCl9fX0hZnVuY3Rpb24oKXt0cnl7dD0iZnVuY3Rpb24iPT10eXBlb2Ygc2V0VGltZW91dD9zZXRUaW1lb3V0OnJ9Y2F0Y2gobil7dD1yfXRyeXtlPSJmdW5jdGlvbiI9PXR5cGVvZiBjbGVhclRpbWVvdXQ/Y2xlYXJUaW1lb3V0Om99Y2F0Y2gobil7ZT1vfX0oKTt2YXIgYyxzPVtdLGw9ITEsYT0tMTtmdW5jdGlvbiBmKCl7bCYmYyYmKGw9ITEsYy5sZW5ndGg/cz1jLmNvbmNhdChzKTphPS0xLHMubGVuZ3RoJiZoKCkpfWZ1bmN0aW9uIGgoKXtpZighbCl7dmFyIHQ9aShmKTtsPSEwO2Zvcih2YXIgZT1zLmxlbmd0aDtlOyl7Zm9yKGM9cyxzPVtdOysrYTxlOyljJiZjW2FdLnJ1bigpO2E9LTEsZT1zLmxlbmd0aH1jPW51bGwsbD0hMSx1KHQpfX1mdW5jdGlvbiBtKHQsZSl7dGhpcy5mdW49dCx0aGlzLmFycmF5PWV9ZnVuY3Rpb24gcCgpe31uLm5leHRUaWNrPWZ1bmN0aW9uKHQpe3ZhciBlPW5ldyBBcnJheShhcmd1bWVudHMubGVuZ3RoLTEpO2lmKGFyZ3VtZW50cy5sZW5ndGg+MSlmb3IodmFyIG49MTtuPGFyZ3VtZW50cy5sZW5ndGg7bisrKWVbbi0xXT1hcmd1bWVudHNbbl07cy5wdXNoKG5ldyBtKHQsZSkpLDEhPT1zLmxlbmd0aHx8bHx8aShoKX0sbS5wcm90b3R5cGUucnVuPWZ1bmN0aW9uKCl7dGhpcy5mdW4uYXBwbHkobnVsbCx0aGlzLmFycmF5KX0sbi50aXRsZT0iYnJvd3NlciIsbi5lbnY9e30sbi5hcmd2PVtdLG4udmVyc2lvbj0iIixuLnZlcnNpb25zPXt9LG4ub249cCxuLmFkZExpc3RlbmVyPXAsbi5vbmNlPXAsbi5vZmY9cCxuLnJlbW92ZUxpc3RlbmVyPXAsbi5yZW1vdmVBbGxMaXN0ZW5lcnM9cCxuLmVtaXQ9cCxuLnByZXBlbmRMaXN0ZW5lcj1wLG4ucHJlcGVuZE9uY2VMaXN0ZW5lcj1wLG4ubGlzdGVuZXJzPWZ1bmN0aW9uKHQpe3JldHVybltdfSxuLmJpbmRpbmc9ZnVuY3Rpb24odCl7dGhyb3cgbmV3IEVycm9yKCJwcm9jZXNzLmJpbmRpbmcgaXMgbm90IHN1cHBvcnRlZCIpfSxuLmN3ZD1mdW5jdGlvbigpe3JldHVybiIvIn0sbi5jaGRpcj1mdW5jdGlvbih0KXt0aHJvdyBuZXcgRXJyb3IoInByb2Nlc3MuY2hkaXIgaXMgbm90IHN1cHBvcnRlZCIpfSxuLnVtYXNrPWZ1bmN0aW9uKCl7cmV0dXJuIDB9Owp9LHt9XSwiZ2ZVbiI6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpIHsKdmFyIHByb2Nlc3MgPSByZXF1aXJlKCJwcm9jZXNzIik7CnZhciBlPXJlcXVpcmUoInByb2Nlc3MiKSx0PU9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzfHxmdW5jdGlvbihlKXtmb3IodmFyIHQ9T2JqZWN0LmtleXMoZSkscj17fSxuPTA7bjx0Lmxlbmd0aDtuKyspclt0W25dXT1PYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGUsdFtuXSk7cmV0dXJuIHJ9LHI9LyVbc2RqJV0vZztleHBvcnRzLmZvcm1hdD1mdW5jdGlvbihlKXtpZighdihlKSl7Zm9yKHZhciB0PVtdLG49MDtuPGFyZ3VtZW50cy5sZW5ndGg7bisrKXQucHVzaChpKGFyZ3VtZW50c1tuXSkpO3JldHVybiB0LmpvaW4oIiAiKX1uPTE7Zm9yKHZhciBvPWFyZ3VtZW50cyx1PW8ubGVuZ3RoLHM9U3RyaW5nKGUpLnJlcGxhY2UocixmdW5jdGlvbihlKXtpZigiJSUiPT09ZSlyZXR1cm4iJSI7aWYobj49dSlyZXR1cm4gZTtzd2l0Y2goZSl7Y2FzZSIlcyI6cmV0dXJuIFN0cmluZyhvW24rK10pO2Nhc2UiJWQiOnJldHVybiBOdW1iZXIob1tuKytdKTtjYXNlIiVqIjp0cnl7cmV0dXJuIEpTT04uc3RyaW5naWZ5KG9bbisrXSl9Y2F0Y2godCl7cmV0dXJuIltDaXJjdWxhcl0ifWRlZmF1bHQ6cmV0dXJuIGV9fSksYz1vW25dO248dTtjPW9bKytuXSloKGMpfHwhUyhjKT9zKz0iICIrYzpzKz0iICIraShjKTtyZXR1cm4gc30sZXhwb3J0cy5kZXByZWNhdGU9ZnVuY3Rpb24odCxyKXtpZih2b2lkIDAhPT1lJiYhMD09PWUubm9EZXByZWNhdGlvbilyZXR1cm4gdDtpZih2b2lkIDA9PT1lKXJldHVybiBmdW5jdGlvbigpe3JldHVybiBleHBvcnRzLmRlcHJlY2F0ZSh0LHIpLmFwcGx5KHRoaXMsYXJndW1lbnRzKX07dmFyIG49ITE7cmV0dXJuIGZ1bmN0aW9uKCl7aWYoIW4pe2lmKGUudGhyb3dEZXByZWNhdGlvbil0aHJvdyBuZXcgRXJyb3Iocik7ZS50cmFjZURlcHJlY2F0aW9uP2NvbnNvbGUudHJhY2Uocik6Y29uc29sZS5lcnJvcihyKSxuPSEwfXJldHVybiB0LmFwcGx5KHRoaXMsYXJndW1lbnRzKX19O3ZhciBuLG89e307ZnVuY3Rpb24gaShlLHQpe3ZhciByPXtzZWVuOltdLHN0eWxpemU6c307cmV0dXJuIGFyZ3VtZW50cy5sZW5ndGg+PTMmJihyLmRlcHRoPWFyZ3VtZW50c1syXSksYXJndW1lbnRzLmxlbmd0aD49NCYmKHIuY29sb3JzPWFyZ3VtZW50c1szXSksYih0KT9yLnNob3dIaWRkZW49dDp0JiZleHBvcnRzLl9leHRlbmQocix0KSxqKHIuc2hvd0hpZGRlbikmJihyLnNob3dIaWRkZW49ITEpLGooci5kZXB0aCkmJihyLmRlcHRoPTIpLGooci5jb2xvcnMpJiYoci5jb2xvcnM9ITEpLGooci5jdXN0b21JbnNwZWN0KSYmKHIuY3VzdG9tSW5zcGVjdD0hMCksci5jb2xvcnMmJihyLnN0eWxpemU9dSkscChyLGUsci5kZXB0aCl9ZnVuY3Rpb24gdShlLHQpe3ZhciByPWkuc3R5bGVzW3RdO3JldHVybiByPyIbWyIraS5jb2xvcnNbcl1bMF0rIm0iK2UrIhtbIitpLmNvbG9yc1tyXVsxXSsibSI6ZX1mdW5jdGlvbiBzKGUsdCl7cmV0dXJuIGV9ZnVuY3Rpb24gYyhlKXt2YXIgdD17fTtyZXR1cm4gZS5mb3JFYWNoKGZ1bmN0aW9uKGUscil7dFtlXT0hMH0pLHR9ZnVuY3Rpb24gcChlLHQscil7aWYoZS5jdXN0b21JbnNwZWN0JiZ0JiZQKHQuaW5zcGVjdCkmJnQuaW5zcGVjdCE9PWV4cG9ydHMuaW5zcGVjdCYmKCF0LmNvbnN0cnVjdG9yfHx0LmNvbnN0cnVjdG9yLnByb3RvdHlwZSE9PXQpKXt2YXIgbj10Lmluc3BlY3QocixlKTtyZXR1cm4gdihuKXx8KG49cChlLG4scikpLG59dmFyIG89bChlLHQpO2lmKG8pcmV0dXJuIG87dmFyIGk9T2JqZWN0LmtleXModCksdT1jKGkpO2lmKGUuc2hvd0hpZGRlbiYmKGk9T2JqZWN0LmdldE93blByb3BlcnR5TmFtZXModCkpLEUodCkmJihpLmluZGV4T2YoIm1lc3NhZ2UiKT49MHx8aS5pbmRleE9mKCJkZXNjcmlwdGlvbiIpPj0wKSlyZXR1cm4gZih0KTtpZigwPT09aS5sZW5ndGgpe2lmKFAodCkpe3ZhciBzPXQubmFtZT8iOiAiK3QubmFtZToiIjtyZXR1cm4gZS5zdHlsaXplKCJbRnVuY3Rpb24iK3MrIl0iLCJzcGVjaWFsIil9aWYodyh0KSlyZXR1cm4gZS5zdHlsaXplKFJlZ0V4cC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh0KSwicmVnZXhwIik7aWYoeih0KSlyZXR1cm4gZS5zdHlsaXplKERhdGUucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwodCksImRhdGUiKTtpZihFKHQpKXJldHVybiBmKHQpfXZhciBiLGg9IiIsbT0hMSx4PVsieyIsIn0iXTsoZCh0KSYmKG09ITAseD1bIlsiLCJdIl0pLFAodCkpJiYoaD0iIFtGdW5jdGlvbiIrKHQubmFtZT8iOiAiK3QubmFtZToiIikrIl0iKTtyZXR1cm4gdyh0KSYmKGg9IiAiK1JlZ0V4cC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh0KSkseih0KSYmKGg9IiAiK0RhdGUucHJvdG90eXBlLnRvVVRDU3RyaW5nLmNhbGwodCkpLEUodCkmJihoPSIgIitmKHQpKSwwIT09aS5sZW5ndGh8fG0mJjAhPXQubGVuZ3RoP3I8MD93KHQpP2Uuc3R5bGl6ZShSZWdFeHAucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwodCksInJlZ2V4cCIpOmUuc3R5bGl6ZSgiW09iamVjdF0iLCJzcGVjaWFsIik6KGUuc2Vlbi5wdXNoKHQpLGI9bT9hKGUsdCxyLHUsaSk6aS5tYXAoZnVuY3Rpb24obil7cmV0dXJuIHkoZSx0LHIsdSxuLG0pfSksZS5zZWVuLnBvcCgpLGcoYixoLHgpKTp4WzBdK2greFsxXX1mdW5jdGlvbiBsKGUsdCl7aWYoaih0KSlyZXR1cm4gZS5zdHlsaXplKCJ1bmRlZmluZWQiLCJ1bmRlZmluZWQiKTtpZih2KHQpKXt2YXIgcj0iJyIrSlNPTi5zdHJpbmdpZnkodCkucmVwbGFjZSgvXiJ8IiQvZywiIikucmVwbGFjZSgvJy9nLCJcXCciKS5yZXBsYWNlKC9cXCIvZywnIicpKyInIjtyZXR1cm4gZS5zdHlsaXplKHIsInN0cmluZyIpfXJldHVybiB4KHQpP2Uuc3R5bGl6ZSgiIit0LCJudW1iZXIiKTpiKHQpP2Uuc3R5bGl6ZSgiIit0LCJib29sZWFuIik6aCh0KT9lLnN0eWxpemUoIm51bGwiLCJudWxsIik6dm9pZCAwfWZ1bmN0aW9uIGYoZSl7cmV0dXJuIlsiK0Vycm9yLnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGUpKyJdIn1mdW5jdGlvbiBhKGUsdCxyLG4sbyl7Zm9yKHZhciBpPVtdLHU9MCxzPXQubGVuZ3RoO3U8czsrK3UpQSh0LFN0cmluZyh1KSk/aS5wdXNoKHkoZSx0LHIsbixTdHJpbmcodSksITApKTppLnB1c2goIiIpO3JldHVybiBvLmZvckVhY2goZnVuY3Rpb24obyl7by5tYXRjaCgvXlxkKyQvKXx8aS5wdXNoKHkoZSx0LHIsbixvLCEwKSl9KSxpfWZ1bmN0aW9uIHkoZSx0LHIsbixvLGkpe3ZhciB1LHMsYztpZigoYz1PYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHQsbyl8fHt2YWx1ZTp0W29dfSkuZ2V0P3M9Yy5zZXQ/ZS5zdHlsaXplKCJbR2V0dGVyL1NldHRlcl0iLCJzcGVjaWFsIik6ZS5zdHlsaXplKCJbR2V0dGVyXSIsInNwZWNpYWwiKTpjLnNldCYmKHM9ZS5zdHlsaXplKCJbU2V0dGVyXSIsInNwZWNpYWwiKSksQShuLG8pfHwodT0iWyIrbysiXSIpLHN8fChlLnNlZW4uaW5kZXhPZihjLnZhbHVlKTwwPyhzPWgocik/cChlLGMudmFsdWUsbnVsbCk6cChlLGMudmFsdWUsci0xKSkuaW5kZXhPZigiXG4iKT4tMSYmKHM9aT9zLnNwbGl0KCJcbiIpLm1hcChmdW5jdGlvbihlKXtyZXR1cm4iICAiK2V9KS5qb2luKCJcbiIpLnN1YnN0cigyKToiXG4iK3Muc3BsaXQoIlxuIikubWFwKGZ1bmN0aW9uKGUpe3JldHVybiIgICAiK2V9KS5qb2luKCJcbiIpKTpzPWUuc3R5bGl6ZSgiW0NpcmN1bGFyXSIsInNwZWNpYWwiKSksaih1KSl7aWYoaSYmby5tYXRjaCgvXlxkKyQvKSlyZXR1cm4gczsodT1KU09OLnN0cmluZ2lmeSgiIitvKSkubWF0Y2goL14iKFthLXpBLVpfXVthLXpBLVpfMC05XSopIiQvKT8odT11LnN1YnN0cigxLHUubGVuZ3RoLTIpLHU9ZS5zdHlsaXplKHUsIm5hbWUiKSk6KHU9dS5yZXBsYWNlKC8nL2csIlxcJyIpLnJlcGxhY2UoL1xcIi9nLCciJykucmVwbGFjZSgvKF4ifCIkKS9nLCInIiksdT1lLnN0eWxpemUodSwic3RyaW5nIikpfXJldHVybiB1KyI6ICIrc31mdW5jdGlvbiBnKGUsdCxyKXtyZXR1cm4gZS5yZWR1Y2UoZnVuY3Rpb24oZSx0KXtyZXR1cm4gMCx0LmluZGV4T2YoIlxuIik+PTAmJjAsZSt0LnJlcGxhY2UoL1x1MDAxYlxbXGRcZD9tL2csIiIpLmxlbmd0aCsxfSwwKT42MD9yWzBdKygiIj09PXQ/IiI6dCsiXG4gIikrIiAiK2Uuam9pbigiLFxuICAiKSsiICIrclsxXTpyWzBdK3QrIiAiK2Uuam9pbigiLCAiKSsiICIrclsxXX1mdW5jdGlvbiBkKGUpe3JldHVybiBBcnJheS5pc0FycmF5KGUpfWZ1bmN0aW9uIGIoZSl7cmV0dXJuImJvb2xlYW4iPT10eXBlb2YgZX1mdW5jdGlvbiBoKGUpe3JldHVybiBudWxsPT09ZX1mdW5jdGlvbiBtKGUpe3JldHVybiBudWxsPT1lfWZ1bmN0aW9uIHgoZSl7cmV0dXJuIm51bWJlciI9PXR5cGVvZiBlfWZ1bmN0aW9uIHYoZSl7cmV0dXJuInN0cmluZyI9PXR5cGVvZiBlfWZ1bmN0aW9uIE8oZSl7cmV0dXJuInN5bWJvbCI9PXR5cGVvZiBlfWZ1bmN0aW9uIGooZSl7cmV0dXJuIHZvaWQgMD09PWV9ZnVuY3Rpb24gdyhlKXtyZXR1cm4gUyhlKSYmIltvYmplY3QgUmVnRXhwXSI9PT1UKGUpfWZ1bmN0aW9uIFMoZSl7cmV0dXJuIm9iamVjdCI9PXR5cGVvZiBlJiZudWxsIT09ZX1mdW5jdGlvbiB6KGUpe3JldHVybiBTKGUpJiYiW29iamVjdCBEYXRlXSI9PT1UKGUpfWZ1bmN0aW9uIEUoZSl7cmV0dXJuIFMoZSkmJigiW29iamVjdCBFcnJvcl0iPT09VChlKXx8ZSBpbnN0YW5jZW9mIEVycm9yKX1mdW5jdGlvbiBQKGUpe3JldHVybiJmdW5jdGlvbiI9PXR5cGVvZiBlfWZ1bmN0aW9uIEQoZSl7cmV0dXJuIG51bGw9PT1lfHwiYm9vbGVhbiI9PXR5cGVvZiBlfHwibnVtYmVyIj09dHlwZW9mIGV8fCJzdHJpbmciPT10eXBlb2YgZXx8InN5bWJvbCI9PXR5cGVvZiBlfHx2b2lkIDA9PT1lfWZ1bmN0aW9uIFQoZSl7cmV0dXJuIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChlKX1mdW5jdGlvbiBOKGUpe3JldHVybiBlPDEwPyIwIitlLnRvU3RyaW5nKDEwKTplLnRvU3RyaW5nKDEwKX1leHBvcnRzLmRlYnVnbG9nPWZ1bmN0aW9uKHQpe2lmKGoobikmJihuPSIiKSx0PXQudG9VcHBlckNhc2UoKSwhb1t0XSlpZihuZXcgUmVnRXhwKCJcXGIiK3QrIlxcYiIsImkiKS50ZXN0KG4pKXt2YXIgcj1lLnBpZDtvW3RdPWZ1bmN0aW9uKCl7dmFyIGU9ZXhwb3J0cy5mb3JtYXQuYXBwbHkoZXhwb3J0cyxhcmd1bWVudHMpO2NvbnNvbGUuZXJyb3IoIiVzICVkOiAlcyIsdCxyLGUpfX1lbHNlIG9bdF09ZnVuY3Rpb24oKXt9O3JldHVybiBvW3RdfSxleHBvcnRzLmluc3BlY3Q9aSxpLmNvbG9ycz17Ym9sZDpbMSwyMl0saXRhbGljOlszLDIzXSx1bmRlcmxpbmU6WzQsMjRdLGludmVyc2U6WzcsMjddLHdoaXRlOlszNywzOV0sZ3JleTpbOTAsMzldLGJsYWNrOlszMCwzOV0sYmx1ZTpbMzQsMzldLGN5YW46WzM2LDM5XSxncmVlbjpbMzIsMzldLG1hZ2VudGE6WzM1LDM5XSxyZWQ6WzMxLDM5XSx5ZWxsb3c6WzMzLDM5XX0saS5zdHlsZXM9e3NwZWNpYWw6ImN5YW4iLG51bWJlcjoieWVsbG93Iixib29sZWFuOiJ5ZWxsb3ciLHVuZGVmaW5lZDoiZ3JleSIsbnVsbDoiYm9sZCIsc3RyaW5nOiJncmVlbiIsZGF0ZToibWFnZW50YSIscmVnZXhwOiJyZWQifSxleHBvcnRzLmlzQXJyYXk9ZCxleHBvcnRzLmlzQm9vbGVhbj1iLGV4cG9ydHMuaXNOdWxsPWgsZXhwb3J0cy5pc051bGxPclVuZGVmaW5lZD1tLGV4cG9ydHMuaXNOdW1iZXI9eCxleHBvcnRzLmlzU3RyaW5nPXYsZXhwb3J0cy5pc1N5bWJvbD1PLGV4cG9ydHMuaXNVbmRlZmluZWQ9aixleHBvcnRzLmlzUmVnRXhwPXcsZXhwb3J0cy5pc09iamVjdD1TLGV4cG9ydHMuaXNEYXRlPXosZXhwb3J0cy5pc0Vycm9yPUUsZXhwb3J0cy5pc0Z1bmN0aW9uPVAsZXhwb3J0cy5pc1ByaW1pdGl2ZT1ELGV4cG9ydHMuaXNCdWZmZXI9cmVxdWlyZSgiLi9zdXBwb3J0L2lzQnVmZmVyIik7dmFyIEY9WyJKYW4iLCJGZWIiLCJNYXIiLCJBcHIiLCJNYXkiLCJKdW4iLCJKdWwiLCJBdWciLCJTZXAiLCJPY3QiLCJOb3YiLCJEZWMiXTtmdW5jdGlvbiBrKCl7dmFyIGU9bmV3IERhdGUsdD1bTihlLmdldEhvdXJzKCkpLE4oZS5nZXRNaW51dGVzKCkpLE4oZS5nZXRTZWNvbmRzKCkpXS5qb2luKCI6Iik7cmV0dXJuW2UuZ2V0RGF0ZSgpLEZbZS5nZXRNb250aCgpXSx0XS5qb2luKCIgIil9ZnVuY3Rpb24gQShlLHQpe3JldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoZSx0KX1leHBvcnRzLmxvZz1mdW5jdGlvbigpe2NvbnNvbGUubG9nKCIlcyAtICVzIixrKCksZXhwb3J0cy5mb3JtYXQuYXBwbHkoZXhwb3J0cyxhcmd1bWVudHMpKX0sZXhwb3J0cy5pbmhlcml0cz1yZXF1aXJlKCJpbmhlcml0cyIpLGV4cG9ydHMuX2V4dGVuZD1mdW5jdGlvbihlLHQpe2lmKCF0fHwhUyh0KSlyZXR1cm4gZTtmb3IodmFyIHI9T2JqZWN0LmtleXModCksbj1yLmxlbmd0aDtuLS07KWVbcltuXV09dFtyW25dXTtyZXR1cm4gZX07dmFyIEo9InVuZGVmaW5lZCIhPXR5cGVvZiBTeW1ib2w/U3ltYm9sKCJ1dGlsLnByb21pc2lmeS5jdXN0b20iKTp2b2lkIDA7ZnVuY3Rpb24gUihlLHQpe2lmKCFlKXt2YXIgcj1uZXcgRXJyb3IoIlByb21pc2Ugd2FzIHJlamVjdGVkIHdpdGggYSBmYWxzeSB2YWx1ZSIpO3IucmVhc29uPWUsZT1yfXJldHVybiB0KGUpfWZ1bmN0aW9uIEgocil7aWYoImZ1bmN0aW9uIiE9dHlwZW9mIHIpdGhyb3cgbmV3IFR5cGVFcnJvcignVGhlICJvcmlnaW5hbCIgYXJndW1lbnQgbXVzdCBiZSBvZiB0eXBlIEZ1bmN0aW9uJyk7ZnVuY3Rpb24gbigpe2Zvcih2YXIgdD1bXSxuPTA7bjxhcmd1bWVudHMubGVuZ3RoO24rKyl0LnB1c2goYXJndW1lbnRzW25dKTt2YXIgbz10LnBvcCgpO2lmKCJmdW5jdGlvbiIhPXR5cGVvZiBvKXRocm93IG5ldyBUeXBlRXJyb3IoIlRoZSBsYXN0IGFyZ3VtZW50IG11c3QgYmUgb2YgdHlwZSBGdW5jdGlvbiIpO3ZhciBpPXRoaXMsdT1mdW5jdGlvbigpe3JldHVybiBvLmFwcGx5KGksYXJndW1lbnRzKX07ci5hcHBseSh0aGlzLHQpLnRoZW4oZnVuY3Rpb24odCl7ZS5uZXh0VGljayh1LG51bGwsdCl9LGZ1bmN0aW9uKHQpe2UubmV4dFRpY2soUix0LHUpfSl9cmV0dXJuIE9iamVjdC5zZXRQcm90b3R5cGVPZihuLE9iamVjdC5nZXRQcm90b3R5cGVPZihyKSksT2JqZWN0LmRlZmluZVByb3BlcnRpZXMobix0KHIpKSxufWV4cG9ydHMucHJvbWlzaWZ5PWZ1bmN0aW9uKGUpe2lmKCJmdW5jdGlvbiIhPXR5cGVvZiBlKXRocm93IG5ldyBUeXBlRXJyb3IoJ1RoZSAib3JpZ2luYWwiIGFyZ3VtZW50IG11c3QgYmUgb2YgdHlwZSBGdW5jdGlvbicpO2lmKEomJmVbSl0pe3ZhciByO2lmKCJmdW5jdGlvbiIhPXR5cGVvZihyPWVbSl0pKXRocm93IG5ldyBUeXBlRXJyb3IoJ1RoZSAidXRpbC5wcm9taXNpZnkuY3VzdG9tIiBhcmd1bWVudCBtdXN0IGJlIG9mIHR5cGUgRnVuY3Rpb24nKTtyZXR1cm4gT2JqZWN0LmRlZmluZVByb3BlcnR5KHIsSix7dmFsdWU6cixlbnVtZXJhYmxlOiExLHdyaXRhYmxlOiExLGNvbmZpZ3VyYWJsZTohMH0pLHJ9ZnVuY3Rpb24gcigpe2Zvcih2YXIgdCxyLG49bmV3IFByb21pc2UoZnVuY3Rpb24oZSxuKXt0PWUscj1ufSksbz1bXSxpPTA7aTxhcmd1bWVudHMubGVuZ3RoO2krKylvLnB1c2goYXJndW1lbnRzW2ldKTtvLnB1c2goZnVuY3Rpb24oZSxuKXtlP3IoZSk6dChuKX0pO3RyeXtlLmFwcGx5KHRoaXMsbyl9Y2F0Y2godSl7cih1KX1yZXR1cm4gbn1yZXR1cm4gT2JqZWN0LnNldFByb3RvdHlwZU9mKHIsT2JqZWN0LmdldFByb3RvdHlwZU9mKGUpKSxKJiZPYmplY3QuZGVmaW5lUHJvcGVydHkocixKLHt2YWx1ZTpyLGVudW1lcmFibGU6ITEsd3JpdGFibGU6ITEsY29uZmlndXJhYmxlOiEwfSksT2JqZWN0LmRlZmluZVByb3BlcnRpZXMocix0KGUpKX0sZXhwb3J0cy5wcm9taXNpZnkuY3VzdG9tPUosZXhwb3J0cy5jYWxsYmFja2lmeT1IOwp9LHsiLi9zdXBwb3J0L2lzQnVmZmVyIjoidmV4UiIsImluaGVyaXRzIjoidGNyRyIsInByb2Nlc3MiOiJwQkd2In1dLCJGUnBPIjpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cykgewoidXNlIHN0cmljdCI7dmFyIGUsdD0ib2JqZWN0Ij09dHlwZW9mIFJlZmxlY3Q/UmVmbGVjdDpudWxsLG49dCYmImZ1bmN0aW9uIj09dHlwZW9mIHQuYXBwbHk/dC5hcHBseTpmdW5jdGlvbihlLHQsbil7cmV0dXJuIEZ1bmN0aW9uLnByb3RvdHlwZS5hcHBseS5jYWxsKGUsdCxuKX07ZnVuY3Rpb24gcihlKXtjb25zb2xlJiZjb25zb2xlLndhcm4mJmNvbnNvbGUud2FybihlKX1lPXQmJiJmdW5jdGlvbiI9PXR5cGVvZiB0Lm93bktleXM/dC5vd25LZXlzOk9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHM/ZnVuY3Rpb24oZSl7cmV0dXJuIE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKGUpLmNvbmNhdChPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKGUpKX06ZnVuY3Rpb24oZSl7cmV0dXJuIE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKGUpfTt2YXIgaT1OdW1iZXIuaXNOYU58fGZ1bmN0aW9uKGUpe3JldHVybiBlIT1lfTtmdW5jdGlvbiBvKCl7by5pbml0LmNhbGwodGhpcyl9bW9kdWxlLmV4cG9ydHM9byxtb2R1bGUuZXhwb3J0cy5vbmNlPW0sby5FdmVudEVtaXR0ZXI9byxvLnByb3RvdHlwZS5fZXZlbnRzPXZvaWQgMCxvLnByb3RvdHlwZS5fZXZlbnRzQ291bnQ9MCxvLnByb3RvdHlwZS5fbWF4TGlzdGVuZXJzPXZvaWQgMDt2YXIgcz0xMDtmdW5jdGlvbiB1KGUpe2lmKCJmdW5jdGlvbiIhPXR5cGVvZiBlKXRocm93IG5ldyBUeXBlRXJyb3IoJ1RoZSAibGlzdGVuZXIiIGFyZ3VtZW50IG11c3QgYmUgb2YgdHlwZSBGdW5jdGlvbi4gUmVjZWl2ZWQgdHlwZSAnK3R5cGVvZiBlKX1mdW5jdGlvbiBmKGUpe3JldHVybiB2b2lkIDA9PT1lLl9tYXhMaXN0ZW5lcnM/by5kZWZhdWx0TWF4TGlzdGVuZXJzOmUuX21heExpc3RlbmVyc31mdW5jdGlvbiBjKGUsdCxuLGkpe3ZhciBvLHMsYztpZih1KG4pLHZvaWQgMD09PShzPWUuX2V2ZW50cyk/KHM9ZS5fZXZlbnRzPU9iamVjdC5jcmVhdGUobnVsbCksZS5fZXZlbnRzQ291bnQ9MCk6KHZvaWQgMCE9PXMubmV3TGlzdGVuZXImJihlLmVtaXQoIm5ld0xpc3RlbmVyIix0LG4ubGlzdGVuZXI/bi5saXN0ZW5lcjpuKSxzPWUuX2V2ZW50cyksYz1zW3RdKSx2b2lkIDA9PT1jKWM9c1t0XT1uLCsrZS5fZXZlbnRzQ291bnQ7ZWxzZSBpZigiZnVuY3Rpb24iPT10eXBlb2YgYz9jPXNbdF09aT9bbixjXTpbYyxuXTppP2MudW5zaGlmdChuKTpjLnB1c2gobiksKG89ZihlKSk+MCYmYy5sZW5ndGg+byYmIWMud2FybmVkKXtjLndhcm5lZD0hMDt2YXIgdj1uZXcgRXJyb3IoIlBvc3NpYmxlIEV2ZW50RW1pdHRlciBtZW1vcnkgbGVhayBkZXRlY3RlZC4gIitjLmxlbmd0aCsiICIrU3RyaW5nKHQpKyIgbGlzdGVuZXJzIGFkZGVkLiBVc2UgZW1pdHRlci5zZXRNYXhMaXN0ZW5lcnMoKSB0byBpbmNyZWFzZSBsaW1pdCIpO3YubmFtZT0iTWF4TGlzdGVuZXJzRXhjZWVkZWRXYXJuaW5nIix2LmVtaXR0ZXI9ZSx2LnR5cGU9dCx2LmNvdW50PWMubGVuZ3RoLHIodil9cmV0dXJuIGV9ZnVuY3Rpb24gdigpe2lmKCF0aGlzLmZpcmVkKXJldHVybiB0aGlzLnRhcmdldC5yZW1vdmVMaXN0ZW5lcih0aGlzLnR5cGUsdGhpcy53cmFwRm4pLHRoaXMuZmlyZWQ9ITAsMD09PWFyZ3VtZW50cy5sZW5ndGg/dGhpcy5saXN0ZW5lci5jYWxsKHRoaXMudGFyZ2V0KTp0aGlzLmxpc3RlbmVyLmFwcGx5KHRoaXMudGFyZ2V0LGFyZ3VtZW50cyl9ZnVuY3Rpb24gbChlLHQsbil7dmFyIHI9e2ZpcmVkOiExLHdyYXBGbjp2b2lkIDAsdGFyZ2V0OmUsdHlwZTp0LGxpc3RlbmVyOm59LGk9di5iaW5kKHIpO3JldHVybiBpLmxpc3RlbmVyPW4sci53cmFwRm49aSxpfWZ1bmN0aW9uIHAoZSx0LG4pe3ZhciByPWUuX2V2ZW50cztpZih2b2lkIDA9PT1yKXJldHVybltdO3ZhciBpPXJbdF07cmV0dXJuIHZvaWQgMD09PWk/W106ImZ1bmN0aW9uIj09dHlwZW9mIGk/bj9baS5saXN0ZW5lcnx8aV06W2ldOm4/ZChpKTpoKGksaS5sZW5ndGgpfWZ1bmN0aW9uIGEoZSl7dmFyIHQ9dGhpcy5fZXZlbnRzO2lmKHZvaWQgMCE9PXQpe3ZhciBuPXRbZV07aWYoImZ1bmN0aW9uIj09dHlwZW9mIG4pcmV0dXJuIDE7aWYodm9pZCAwIT09bilyZXR1cm4gbi5sZW5ndGh9cmV0dXJuIDB9ZnVuY3Rpb24gaChlLHQpe2Zvcih2YXIgbj1uZXcgQXJyYXkodCkscj0wO3I8dDsrK3IpbltyXT1lW3JdO3JldHVybiBufWZ1bmN0aW9uIHkoZSx0KXtmb3IoO3QrMTxlLmxlbmd0aDt0KyspZVt0XT1lW3QrMV07ZS5wb3AoKX1mdW5jdGlvbiBkKGUpe2Zvcih2YXIgdD1uZXcgQXJyYXkoZS5sZW5ndGgpLG49MDtuPHQubGVuZ3RoOysrbil0W25dPWVbbl0ubGlzdGVuZXJ8fGVbbl07cmV0dXJuIHR9ZnVuY3Rpb24gbShlLHQpe3JldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihuLHIpe2Z1bmN0aW9uIGkobil7ZS5yZW1vdmVMaXN0ZW5lcih0LG8pLHIobil9ZnVuY3Rpb24gbygpeyJmdW5jdGlvbiI9PXR5cGVvZiBlLnJlbW92ZUxpc3RlbmVyJiZlLnJlbW92ZUxpc3RlbmVyKCJlcnJvciIsaSksbihbXS5zbGljZS5jYWxsKGFyZ3VtZW50cykpfWcoZSx0LG8se29uY2U6ITB9KSwiZXJyb3IiIT09dCYmTChlLGkse29uY2U6ITB9KX0pfWZ1bmN0aW9uIEwoZSx0LG4peyJmdW5jdGlvbiI9PXR5cGVvZiBlLm9uJiZnKGUsImVycm9yIix0LG4pfWZ1bmN0aW9uIGcoZSx0LG4scil7aWYoImZ1bmN0aW9uIj09dHlwZW9mIGUub24pci5vbmNlP2Uub25jZSh0LG4pOmUub24odCxuKTtlbHNle2lmKCJmdW5jdGlvbiIhPXR5cGVvZiBlLmFkZEV2ZW50TGlzdGVuZXIpdGhyb3cgbmV3IFR5cGVFcnJvcignVGhlICJlbWl0dGVyIiBhcmd1bWVudCBtdXN0IGJlIG9mIHR5cGUgRXZlbnRFbWl0dGVyLiBSZWNlaXZlZCB0eXBlICcrdHlwZW9mIGUpO2UuYWRkRXZlbnRMaXN0ZW5lcih0LGZ1bmN0aW9uIGkobyl7ci5vbmNlJiZlLnJlbW92ZUV2ZW50TGlzdGVuZXIodCxpKSxuKG8pfSl9fU9iamVjdC5kZWZpbmVQcm9wZXJ0eShvLCJkZWZhdWx0TWF4TGlzdGVuZXJzIix7ZW51bWVyYWJsZTohMCxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gc30sc2V0OmZ1bmN0aW9uKGUpe2lmKCJudW1iZXIiIT10eXBlb2YgZXx8ZTwwfHxpKGUpKXRocm93IG5ldyBSYW5nZUVycm9yKCdUaGUgdmFsdWUgb2YgImRlZmF1bHRNYXhMaXN0ZW5lcnMiIGlzIG91dCBvZiByYW5nZS4gSXQgbXVzdCBiZSBhIG5vbi1uZWdhdGl2ZSBudW1iZXIuIFJlY2VpdmVkICcrZSsiLiIpO3M9ZX19KSxvLmluaXQ9ZnVuY3Rpb24oKXt2b2lkIDAhPT10aGlzLl9ldmVudHMmJnRoaXMuX2V2ZW50cyE9PU9iamVjdC5nZXRQcm90b3R5cGVPZih0aGlzKS5fZXZlbnRzfHwodGhpcy5fZXZlbnRzPU9iamVjdC5jcmVhdGUobnVsbCksdGhpcy5fZXZlbnRzQ291bnQ9MCksdGhpcy5fbWF4TGlzdGVuZXJzPXRoaXMuX21heExpc3RlbmVyc3x8dm9pZCAwfSxvLnByb3RvdHlwZS5zZXRNYXhMaXN0ZW5lcnM9ZnVuY3Rpb24oZSl7aWYoIm51bWJlciIhPXR5cGVvZiBlfHxlPDB8fGkoZSkpdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ1RoZSB2YWx1ZSBvZiAibiIgaXMgb3V0IG9mIHJhbmdlLiBJdCBtdXN0IGJlIGEgbm9uLW5lZ2F0aXZlIG51bWJlci4gUmVjZWl2ZWQgJytlKyIuIik7cmV0dXJuIHRoaXMuX21heExpc3RlbmVycz1lLHRoaXN9LG8ucHJvdG90eXBlLmdldE1heExpc3RlbmVycz1mdW5jdGlvbigpe3JldHVybiBmKHRoaXMpfSxvLnByb3RvdHlwZS5lbWl0PWZ1bmN0aW9uKGUpe2Zvcih2YXIgdD1bXSxyPTE7cjxhcmd1bWVudHMubGVuZ3RoO3IrKyl0LnB1c2goYXJndW1lbnRzW3JdKTt2YXIgaT0iZXJyb3IiPT09ZSxvPXRoaXMuX2V2ZW50cztpZih2b2lkIDAhPT1vKWk9aSYmdm9pZCAwPT09by5lcnJvcjtlbHNlIGlmKCFpKXJldHVybiExO2lmKGkpe3ZhciBzO2lmKHQubGVuZ3RoPjAmJihzPXRbMF0pLHMgaW5zdGFuY2VvZiBFcnJvcil0aHJvdyBzO3ZhciB1PW5ldyBFcnJvcigiVW5oYW5kbGVkIGVycm9yLiIrKHM/IiAoIitzLm1lc3NhZ2UrIikiOiIiKSk7dGhyb3cgdS5jb250ZXh0PXMsdX12YXIgZj1vW2VdO2lmKHZvaWQgMD09PWYpcmV0dXJuITE7aWYoImZ1bmN0aW9uIj09dHlwZW9mIGYpbihmLHRoaXMsdCk7ZWxzZXt2YXIgYz1mLmxlbmd0aCx2PWgoZixjKTtmb3Iocj0wO3I8YzsrK3Ipbih2W3JdLHRoaXMsdCl9cmV0dXJuITB9LG8ucHJvdG90eXBlLmFkZExpc3RlbmVyPWZ1bmN0aW9uKGUsdCl7cmV0dXJuIGModGhpcyxlLHQsITEpfSxvLnByb3RvdHlwZS5vbj1vLnByb3RvdHlwZS5hZGRMaXN0ZW5lcixvLnByb3RvdHlwZS5wcmVwZW5kTGlzdGVuZXI9ZnVuY3Rpb24oZSx0KXtyZXR1cm4gYyh0aGlzLGUsdCwhMCl9LG8ucHJvdG90eXBlLm9uY2U9ZnVuY3Rpb24oZSx0KXtyZXR1cm4gdSh0KSx0aGlzLm9uKGUsbCh0aGlzLGUsdCkpLHRoaXN9LG8ucHJvdG90eXBlLnByZXBlbmRPbmNlTGlzdGVuZXI9ZnVuY3Rpb24oZSx0KXtyZXR1cm4gdSh0KSx0aGlzLnByZXBlbmRMaXN0ZW5lcihlLGwodGhpcyxlLHQpKSx0aGlzfSxvLnByb3RvdHlwZS5yZW1vdmVMaXN0ZW5lcj1mdW5jdGlvbihlLHQpe3ZhciBuLHIsaSxvLHM7aWYodSh0KSx2b2lkIDA9PT0ocj10aGlzLl9ldmVudHMpKXJldHVybiB0aGlzO2lmKHZvaWQgMD09PShuPXJbZV0pKXJldHVybiB0aGlzO2lmKG49PT10fHxuLmxpc3RlbmVyPT09dCkwPT0tLXRoaXMuX2V2ZW50c0NvdW50P3RoaXMuX2V2ZW50cz1PYmplY3QuY3JlYXRlKG51bGwpOihkZWxldGUgcltlXSxyLnJlbW92ZUxpc3RlbmVyJiZ0aGlzLmVtaXQoInJlbW92ZUxpc3RlbmVyIixlLG4ubGlzdGVuZXJ8fHQpKTtlbHNlIGlmKCJmdW5jdGlvbiIhPXR5cGVvZiBuKXtmb3IoaT0tMSxvPW4ubGVuZ3RoLTE7bz49MDtvLS0paWYobltvXT09PXR8fG5bb10ubGlzdGVuZXI9PT10KXtzPW5bb10ubGlzdGVuZXIsaT1vO2JyZWFrfWlmKGk8MClyZXR1cm4gdGhpczswPT09aT9uLnNoaWZ0KCk6eShuLGkpLDE9PT1uLmxlbmd0aCYmKHJbZV09blswXSksdm9pZCAwIT09ci5yZW1vdmVMaXN0ZW5lciYmdGhpcy5lbWl0KCJyZW1vdmVMaXN0ZW5lciIsZSxzfHx0KX1yZXR1cm4gdGhpc30sby5wcm90b3R5cGUub2ZmPW8ucHJvdG90eXBlLnJlbW92ZUxpc3RlbmVyLG8ucHJvdG90eXBlLnJlbW92ZUFsbExpc3RlbmVycz1mdW5jdGlvbihlKXt2YXIgdCxuLHI7aWYodm9pZCAwPT09KG49dGhpcy5fZXZlbnRzKSlyZXR1cm4gdGhpcztpZih2b2lkIDA9PT1uLnJlbW92ZUxpc3RlbmVyKXJldHVybiAwPT09YXJndW1lbnRzLmxlbmd0aD8odGhpcy5fZXZlbnRzPU9iamVjdC5jcmVhdGUobnVsbCksdGhpcy5fZXZlbnRzQ291bnQ9MCk6dm9pZCAwIT09bltlXSYmKDA9PS0tdGhpcy5fZXZlbnRzQ291bnQ/dGhpcy5fZXZlbnRzPU9iamVjdC5jcmVhdGUobnVsbCk6ZGVsZXRlIG5bZV0pLHRoaXM7aWYoMD09PWFyZ3VtZW50cy5sZW5ndGgpe3ZhciBpLG89T2JqZWN0LmtleXMobik7Zm9yKHI9MDtyPG8ubGVuZ3RoOysrcikicmVtb3ZlTGlzdGVuZXIiIT09KGk9b1tyXSkmJnRoaXMucmVtb3ZlQWxsTGlzdGVuZXJzKGkpO3JldHVybiB0aGlzLnJlbW92ZUFsbExpc3RlbmVycygicmVtb3ZlTGlzdGVuZXIiKSx0aGlzLl9ldmVudHM9T2JqZWN0LmNyZWF0ZShudWxsKSx0aGlzLl9ldmVudHNDb3VudD0wLHRoaXN9aWYoImZ1bmN0aW9uIj09dHlwZW9mKHQ9bltlXSkpdGhpcy5yZW1vdmVMaXN0ZW5lcihlLHQpO2Vsc2UgaWYodm9pZCAwIT09dClmb3Iocj10Lmxlbmd0aC0xO3I+PTA7ci0tKXRoaXMucmVtb3ZlTGlzdGVuZXIoZSx0W3JdKTtyZXR1cm4gdGhpc30sby5wcm90b3R5cGUubGlzdGVuZXJzPWZ1bmN0aW9uKGUpe3JldHVybiBwKHRoaXMsZSwhMCl9LG8ucHJvdG90eXBlLnJhd0xpc3RlbmVycz1mdW5jdGlvbihlKXtyZXR1cm4gcCh0aGlzLGUsITEpfSxvLmxpc3RlbmVyQ291bnQ9ZnVuY3Rpb24oZSx0KXtyZXR1cm4iZnVuY3Rpb24iPT10eXBlb2YgZS5saXN0ZW5lckNvdW50P2UubGlzdGVuZXJDb3VudCh0KTphLmNhbGwoZSx0KX0sby5wcm90b3R5cGUubGlzdGVuZXJDb3VudD1hLG8ucHJvdG90eXBlLmV2ZW50TmFtZXM9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fZXZlbnRzQ291bnQ+MD9lKHRoaXMuX2V2ZW50cyk6W119Owp9LHt9XSwiZmhnNyI6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpIHsKY29uc3Qgcj1yZXF1aXJlKCJ1dGlsIiksdD1yZXF1aXJlKCJldmVudHMvIik7dmFyIGU9Im9iamVjdCI9PXR5cGVvZiBSZWZsZWN0P1JlZmxlY3Q6bnVsbCxuPWUmJiJmdW5jdGlvbiI9PXR5cGVvZiBlLmFwcGx5P2UuYXBwbHk6ZnVuY3Rpb24ocix0LGUpe3JldHVybiBGdW5jdGlvbi5wcm90b3R5cGUuYXBwbHkuY2FsbChyLHQsZSl9O2Z1bmN0aW9uIG8oKXt0LmNhbGwodGhpcyl9ZnVuY3Rpb24gaShyLHQsZSl7dHJ5e24ocix0LGUpfWNhdGNoKG8pe3NldFRpbWVvdXQoKCk9Pnt0aHJvdyBvfSl9fWZ1bmN0aW9uIGYocix0KXtmb3IodmFyIGU9bmV3IEFycmF5KHQpLG49MDtuPHQ7KytuKWVbbl09cltuXTtyZXR1cm4gZX1tb2R1bGUuZXhwb3J0cz1vLHIuaW5oZXJpdHMobyx0KSxvLnByb3RvdHlwZS5lbWl0PWZ1bmN0aW9uKHIpe2Zvcih2YXIgdD1bXSxlPTE7ZTxhcmd1bWVudHMubGVuZ3RoO2UrKyl0LnB1c2goYXJndW1lbnRzW2VdKTt2YXIgbj0iZXJyb3IiPT09cixvPXRoaXMuX2V2ZW50cztpZih2b2lkIDAhPT1vKW49biYmdm9pZCAwPT09by5lcnJvcjtlbHNlIGlmKCFuKXJldHVybiExO2lmKG4pe3ZhciB1O2lmKHQubGVuZ3RoPjAmJih1PXRbMF0pLHUgaW5zdGFuY2VvZiBFcnJvcil0aHJvdyB1O3ZhciBsPW5ldyBFcnJvcigiVW5oYW5kbGVkIGVycm9yLiIrKHU/IiAoIit1Lm1lc3NhZ2UrIikiOiIiKSk7dGhyb3cgbC5jb250ZXh0PXUsbH12YXIgYT1vW3JdO2lmKHZvaWQgMD09PWEpcmV0dXJuITE7aWYoImZ1bmN0aW9uIj09dHlwZW9mIGEpaShhLHRoaXMsdCk7ZWxzZXt2YXIgYz1hLmxlbmd0aCxzPWYoYSxjKTtmb3IoZT0wO2U8YzsrK2UpaShzW2VdLHRoaXMsdCl9cmV0dXJuITB9Owp9LHsidXRpbCI6ImdmVW4iLCJldmVudHMvIjoiRlJwTyJ9XSwiZTNWRCI6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpIHsKInVzZSBzdHJpY3QiO2NvbnN0IHI9cmVxdWlyZSgic2FmZS1ldmVudC1lbWl0dGVyIikse3NlcmlhbGl6ZUVycm9yOmUsRXRoZXJldW1ScGNFcnJvcjpuLEVSUk9SX0NPREVTOnR9PXJlcXVpcmUoImV0aC1ycGMtZXJyb3JzIik7bW9kdWxlLmV4cG9ydHM9Y2xhc3MgcyBleHRlbmRzIHJ7Y29uc3RydWN0b3IoKXtzdXBlcigpLHRoaXMuX21pZGRsZXdhcmU9W119cHVzaChyKXt0aGlzLl9taWRkbGV3YXJlLnB1c2gocil9aGFuZGxlKHIsZSl7cmV0dXJuIEFycmF5LmlzQXJyYXkocik/ZT92b2lkIHRoaXMuX2hhbmRsZUJhdGNoKHIpLnRoZW4ocj0+ZShudWxsLHIpKS5jYXRjaChyPT5lKHIpKTp0aGlzLl9oYW5kbGVCYXRjaChyKTplP3RoaXMuX2hhbmRsZShyLGUpOnRoaXMuX3Byb21pc2VIYW5kbGUocil9YXN5bmMgX2hhbmRsZUJhdGNoKHIpe3JldHVybiBhd2FpdCBQcm9taXNlLmFsbChyLm1hcCh0aGlzLl9wcm9taXNlSGFuZGxlLmJpbmQodGhpcykpKX1fcHJvbWlzZUhhbmRsZShyKXtyZXR1cm4gbmV3IFByb21pc2UoZT0+e3RoaXMuX2hhbmRsZShyLChyLG4pPT57ZShuKX0pfSl9X2hhbmRsZShyLG4pe2NvbnN0IHQ9T2JqZWN0LmFzc2lnbih7fSxyKSxzPXtpZDp0LmlkLGpzb25ycGM6dC5qc29ucnBjfTtsZXQgaTt0aGlzLl9wcm9jZXNzUmVxdWVzdCh0LHMpLmNhdGNoKHI9PntpPXJ9KS5maW5hbGx5KCgpPT57Y29uc3Qgcj1zLl9vcmlnaW5hbEVycm9yO2RlbGV0ZSBzLl9vcmlnaW5hbEVycm9yO2NvbnN0IHQ9cnx8aXx8bnVsbDt0JiYoZGVsZXRlIHMucmVzdWx0LHMuZXJyb3J8fChzLmVycm9yPWUodCkpKSxuKHQscyl9KX1hc3luYyBfcHJvY2Vzc1JlcXVlc3QocixlKXtjb25zdHtpc0NvbXBsZXRlOm4scmV0dXJuSGFuZGxlcnM6dH09YXdhaXQgdGhpcy5fcnVuQWxsTWlkZGxld2FyZShyLGUpO3RoaXMuX2NoZWNrRm9yQ29tcGxldGlvbihyLGUsbiksYXdhaXQgdGhpcy5fcnVuUmV0dXJuSGFuZGxlcnModCl9YXN5bmMgX3J1blJldHVybkhhbmRsZXJzKHIpe2Zvcihjb25zdCBlIG9mIHIpYXdhaXQgbmV3IFByb21pc2UoKHIsbik9PntlKGU9PmU/bihlKTpyKCkpfSl9X2NoZWNrRm9yQ29tcGxldGlvbihyLGUscyl7aWYoISgicmVzdWx0ImluIGV8fCJlcnJvciJpbiBlKSl7Y29uc3QgZT1gSnNvblJwY0VuZ2luZTogUmVzcG9uc2UgaGFzIG5vIGVycm9yIG9yIHJlc3VsdCBmb3IgcmVxdWVzdDpcbiR7SlNPTi5zdHJpbmdpZnkocixudWxsLDIpfWA7dGhyb3cgbmV3IG4odC5ycGMuaW50ZXJuYWwsZSxyKX1pZighcyl7Y29uc3QgZT1gSnNvblJwY0VuZ2luZTogTm90aGluZyBlbmRlZCByZXF1ZXN0OlxuJHtKU09OLnN0cmluZ2lmeShyLG51bGwsMil9YDt0aHJvdyBuZXcgbih0LnJwYy5pbnRlcm5hbCxlLHIpfX1hc3luYyBfcnVuQWxsTWlkZGxld2FyZShyLGUpe2NvbnN0IG49W107bGV0IHQ9ITE7Zm9yKGNvbnN0IGkgb2YgdGhpcy5fbWlkZGxld2FyZSlpZih0PWF3YWl0IHMuX3J1bk1pZGRsZXdhcmUocixlLGksbikpYnJlYWs7cmV0dXJue2lzQ29tcGxldGU6dCxyZXR1cm5IYW5kbGVyczpuLnJldmVyc2UoKX19c3RhdGljIF9ydW5NaWRkbGV3YXJlKHIsbix0LHMpe3JldHVybiBuZXcgUHJvbWlzZShpPT57Y29uc3Qgbz1yPT57Y29uc3QgdD1yfHxuJiZuLmVycm9yO3QmJihuLmVycm9yPWUodCksbi5fb3JpZ2luYWxFcnJvcj10KSxpKCEwKX0sYT1yPT57bi5lcnJvcj9vKG4uZXJyb3IpOihyJiZzLnB1c2gociksaSghMSkpfTt0cnl7dChyLG4sYSxvKX1jYXRjaChsKXtvKGwpfX0pfX07Cn0seyJzYWZlLWV2ZW50LWVtaXR0ZXIiOiJmaGc3IiwiZXRoLXJwYy1lcnJvcnMiOiJFdThYIn1dLCJ6eHdJIjpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cykgewoidXNlIHN0cmljdCI7T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIl9fZXNNb2R1bGUiLHt2YWx1ZTohMH0pO2NvbnN0IGU9cmVxdWlyZSgiZXZlbnRzIik7ZnVuY3Rpb24gdChlLHQscil7dHJ5e1JlZmxlY3QuYXBwbHkoZSx0LHIpfWNhdGNoKG4pe3NldFRpbWVvdXQoKCk9Pnt0aHJvdyBufSl9fWZ1bmN0aW9uIHIoZSl7Y29uc3QgdD1lLmxlbmd0aCxyPW5ldyBBcnJheSh0KTtmb3IobGV0IG49MDtuPHQ7bis9MSlyW25dPWVbbl07cmV0dXJuIHJ9Y2xhc3MgbiBleHRlbmRzIGUuRXZlbnRFbWl0dGVye2VtaXQoZSwuLi5uKXtsZXQgbz0iZXJyb3IiPT09ZTtjb25zdCBzPXRoaXMuX2V2ZW50cztpZih2b2lkIDAhPT1zKW89byYmdm9pZCAwPT09cy5lcnJvcjtlbHNlIGlmKCFvKXJldHVybiExO2lmKG8pe2xldCBlO2lmKG4ubGVuZ3RoPjAmJihbZV09biksZSBpbnN0YW5jZW9mIEVycm9yKXRocm93IGU7Y29uc3QgdD1uZXcgRXJyb3IoYFVuaGFuZGxlZCBlcnJvci4ke2U/YCAoJHtlLm1lc3NhZ2V9KWA6IiJ9YCk7dGhyb3cgdC5jb250ZXh0PWUsdH1jb25zdCBpPXNbZV07aWYodm9pZCAwPT09aSlyZXR1cm4hMTtpZigiZnVuY3Rpb24iPT10eXBlb2YgaSl0KGksdGhpcyxuKTtlbHNle2NvbnN0IGU9aS5sZW5ndGgsbz1yKGkpO2ZvcihsZXQgcj0wO3I8ZTtyKz0xKXQob1tyXSx0aGlzLG4pfXJldHVybiEwfX1leHBvcnRzLmRlZmF1bHQ9bjsKfSx7ImV2ZW50cyI6IkZScE8ifV0sIkZvY20iOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKSB7CiJ1c2Ugc3RyaWN0Ijt2YXIgZT10KHJlcXVpcmUoIkBtZXRhbWFzay9zYWZlLWV2ZW50LWVtaXR0ZXIiKSk7ZnVuY3Rpb24gdChlKXtyZXR1cm4gZSYmZS5fX2VzTW9kdWxlP2U6e2RlZmF1bHQ6ZX19Y29uc3QgaT1yZXF1aXJlKCJldGgtanNvbi1ycGMtaHR0cCIpLG49cmVxdWlyZSgianNvbi1ycGMtZW5naW5lL3NyYy9jcmVhdGVBc3luY01pZGRsZXdhcmUiKSxyPXJlcXVpcmUoImpzb24tcnBjLWVuZ2luZSIpLHM9e2V0aF9yZXF1ZXN0QWNjb3VudHM6ITAsZXRoX2FjY291bnRzOiEwLGV0aF9zZW5kVHJhbnNhY3Rpb246ITAsZXRoX3NpZ246ITAsZXRoX2RlY3J5cHQ6ITAsZXRoX2dldEVuY3J5cHRpb25QdWJsaWNLZXk6ITAsZXRoX3NpZ25UeXBlZERhdGE6ITAsZXRoX3NpZ25UeXBlZERhdGFfdjM6ITAsZXRoX3NpZ25UeXBlZERhdGFfdjQ6ITAscGVyc29uYWxfc2lnbjohMCx3YWxsZXRfcmVxdWVzdFBlcm1pc3Npb25zOiEwLHdhbGxldF9nZXRQZXJtaXNzaW9uczohMCx3YWxsZXRfYWRkRXRoZXJldW1DaGFpbjohMCx3YWxsZXRfc3dpdGNoRXRoZXJldW1DaGFpbjohMCx3YWxsZXRfd2F0Y2hBc3NldDohMCx3YWxsZXRfc2NhblFSQ29kZTohMH0sYT1uKGFzeW5jKGUsdCxpKT0+e2lmKHNbZS5tZXRob2RdKXtlLmNoYWluSWQ9d2luZG93LmV0aGVyZXVtLmNoYWluSWQ7dHJ5e2NvbnN0IGk9YXdhaXQgd2luZG93LmZsdXR0ZXJfaW5hcHB3ZWJ2aWV3LmNhbGxIYW5kbGVyKCJCaXRpemVuUnBjUmVxdWVzdCIsSlNPTi5zdHJpbmdpZnkoZSkpO3QuZXJyb3I9aS5lcnJvcix0LnJlc3VsdD1pLnJlc3VsdH1jYXRjaChuKXt0LmVycm9yPW59fWVsc2UgaSgpfSk7d2luZG93LmV0aGVyZXVtPXtpc0JpdGl6ZW46ITAsaXNNZXRhTWFzazohMSxpc0Nvbm5lY3RlZDohMSxjaGFpbklkOiIiLHJlcUlkOjEsX2JpdGl6ZW5FdmVudEVtaXR0ZXI6bmV3IGUuZGVmYXVsdCxfYml0aXplblJwY0VuZ2luZTpuZXcgcixfQml0aXplblVwZGF0ZVJwY1VybChlLHQpe3dpbmRvdy5ldGhlcmV1bS5pc01ldGFNYXNrJiZjb25zb2xlLmxvZygiYml0aXplbl9pbnBhZ2UgdXBkYXRlIFJQQyIsZSx0KSx3aW5kb3cuZXRoZXJldW0uX2JpdGl6ZW5ScGNFbmdpbmU9bmV3IHIsd2luZG93LmV0aGVyZXVtLl9iaXRpemVuUnBjRW5naW5lLnB1c2goYSksd2luZG93LmV0aGVyZXVtLl9iaXRpemVuUnBjRW5naW5lLnB1c2goaSh7cnBjVXJsOnR9KSksd2luZG93LmV0aGVyZXVtLmNoYWluSWQ9ZSx3aW5kb3cuZXRoZXJldW0uaXNDb25uZWN0ZWQ9ITB9LF9CaXRpemVuRXZlbnRFbWl0KGUpe2xldCB0PWFyZ3VtZW50cy5sZW5ndGg+MSYmdm9pZCAwIT09YXJndW1lbnRzWzFdP2FyZ3VtZW50c1sxXTpbXTt3aW5kb3cuZXRoZXJldW0uaXNNZXRhTWFzayYmY29uc29sZS5sb2coImJpdGl6ZW5faW5wYWdlIGVtaXQiLGUsdCksd2luZG93LmV0aGVyZXVtLl9iaXRpemVuRXZlbnRFbWl0dGVyLmVtaXQoZSwuLi50KX0scmVxdWVzdDphc3luYyBlPT4oZS5qc29ucnBjfHwoZS5qc29ucnBjPSIyLjAiKSxlLmlkfHwoZS5pZD13aW5kb3cuZXRoZXJldW0ucmVxSWQrKyksd2luZG93LmV0aGVyZXVtLmlzTWV0YU1hc2smJmNvbnNvbGUubG9nKCJiaXRpemVuX2lucGFnZSByZXEiLGUuaWQsZSksbmV3IFByb21pc2UoYXN5bmModCxpKT0+e2NvbnN0IG49YXdhaXQgd2luZG93LmV0aGVyZXVtLl9iaXRpemVuUnBjRW5naW5lLmhhbmRsZShlKTt3aW5kb3cuZXRoZXJldW0uaXNNZXRhTWFzayYmY29uc29sZS5sb2coImJpdGl6ZW5faW5wYWdlIHJlcyIsbi5yZXN1bHQsbi5lcnJvciksbi5lcnJvcj9pKG4uZXJyb3IpOnQobi5yZXN1bHQpfSkpLG9uOihlLHQpPT53aW5kb3cuZXRoZXJldW0uX2JpdGl6ZW5FdmVudEVtaXR0ZXIub24oZSx0KX07Cn0seyJldGgtanNvbi1ycGMtaHR0cCI6InJiWEMiLCJqc29uLXJwYy1lbmdpbmUvc3JjL2NyZWF0ZUFzeW5jTWlkZGxld2FyZSI6ImEyQ3oiLCJqc29uLXJwYy1lbmdpbmUiOiJlM1ZEIiwiQG1ldGFtYXNrL3NhZmUtZXZlbnQtZW1pdHRlciI6Inp4d0kifV19LHt9LFsiRm9jbSJdLCBudWxsKQ=="));

