import 'dart:convert';

String injectJs = utf8.fuse(base64).decode("d2luZG93Ll9iaXRpemVuQ29uc29sZSA9IE9iamVjdC5hc3NpZ24oe30sIGNvbnNvbGUpCmlmICgnc2VydmljZVdvcmtlcicgaW4gbmF2aWdhdG9yKSB7CiAgICAvLyDlpoLmnpwgc2VydmljZVdvcmtlciDnvJPlrZjkuoYgaHRtbO+8jOS8muWGsuaOieW1jOWFpeiEmuacrAogICAgbmF2aWdhdG9yLnNlcnZpY2VXb3JrZXIucmVnaXN0ZXIgPSBmdW5jdGlvbiAoKSB7CiAgICAgICAgX2JpdGl6ZW5Db25zb2xlLndhcm4oIkJpdGl6ZW46IFtkZWJ1Z10gc2VydmljZVdvcmtlci5yZWdpc3RlciBkaXNhYmxlZCIpOwogICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdCgiQml0aXplbjogW2RlYnVnXSBzZXJ2aWNlV29ya2VyLnJlZ2lzdGVyIGRpc2FibGVkIikKICAgIH0KfQpfYml0aXplbkNvbnNvbGUubG9nKCJCaXRpemVuOiBbZGVidWddIGluamVjdCBzdGFydGVkIikKaWYgKHNob3VsZEluamVjdCgpKSB7CiAgICBpbmplY3RTY3JpcHQoZGVjb2RlVVJJQ29tcG9uZW50KGAjQklUSVpFTl9JTkpFQ1QjYCkpCiAgICB3aW5kb3cuZXRoZXJldW0uaXNNZXRhTWFzayA9IHRydWUgLy8gb3BlbnNlYS5pbyByZXF1aXJlZCB0aGlzCiAgICB3aW5kb3cuZXRoZXJldW0uY2hhaW5JZCA9ICIjQklUSVpFTl9DSEFJTklEIyIKICAgIC8vIHdpbmRvdy5kaXNwYXRjaEV2ZW50KG5ldyBFdmVudCgnZXRoZXJldW0jaW5pdGlhbGl6ZWQnKSkKICAgIF9iaXRpemVuQ29uc29sZS5sb2coIkJpdGl6ZW46IFtkZWJ1Z10gaW5qZWN0IGZpbmlzaGVkIiwgd2luZG93LmV0aGVyZXVtLnZlcnNpb24pCgogICAgY29uc3QgZGVidWcgPSAiI0JJVElaRU5fREVCVUcjIgogICAgaWYgKGRlYnVnKSB7CiAgICAgICAgd2luZG93LmV0aGVyZXVtLmRlYnVnID0gdHJ1ZQogICAgICAgIGluamVjdFNjcmlwdCgiIiwgIi8vdW5wa2cuY29tL3Zjb25zb2xlQGxhdGVzdC9kaXN0L3Zjb25zb2xlLm1pbi5qcyIpCiAgICB9IGVsc2UgewogICAgICAgIF9iaXRpemVuQ29uc29sZS5kZWJ1ZyA9ICgpID0+IHsgfQogICAgfQoKICAgIHN0YXJ0KGRlYnVnKTsKfQoKLy8gRnVuY3Rpb25zCgovKioKICogU2V0cyB1cCB0aGUgc3RyZWFtIGNvbW11bmljYXRpb24gYW5kIHN1Ym1pdHMgc2l0ZSBtZXRhZGF0YQogKgogKi8KYXN5bmMgZnVuY3Rpb24gc3RhcnQoZGVidWcpIHsKICAgIGF3YWl0IGRvbUlzUmVhZHkoKTsKCiAgICBpZiAoZGVidWcpIHsKICAgICAgICAoYXN5bmMgZnVuY3Rpb24gKCkgewogICAgICAgICAgICB3aGlsZSAod2luZG93LlZDb25zb2xlID09IG51bGwpIHsKICAgICAgICAgICAgICAgIGF3YWl0IG5ldyBQcm9taXNlKHIgPT4gc2V0VGltZW91dChyLCAxMDApKTsKICAgICAgICAgICAgfQogICAgICAgICAgICBuZXcgd2luZG93LlZDb25zb2xlKCk7CiAgICAgICAgfSkoKQogICAgfQp9CgovKioKICogSW5qZWN0cyBhIHNjcmlwdCB0YWcgaW50byB0aGUgY3VycmVudCBkb2N1bWVudAogKgogKiBAcGFyYW0ge3N0cmluZ30gY29udGVudCAtIENvZGUgdG8gYmUgZXhlY3V0ZWQgaW4gdGhlIGN1cnJlbnQgZG9jdW1lbnQKICovCmZ1bmN0aW9uIGluamVjdFNjcmlwdChjb250ZW50LCBzcmMpIHsKICAgIHRyeSB7CiAgICAgICAgaWYgKCFjb250ZW50ICYmICFzcmMpIHsKICAgICAgICAgICAgdGhyb3cgIkVtcHR5IGNvbnRlbnQiCiAgICAgICAgfQoKICAgICAgICBjb25zdCBjb250YWluZXIgPSBkb2N1bWVudC5oZWFkIHx8IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudDsKCiAgICAgICAgLy8gc3luY2hyb25vdXNseSBleGVjdXRlIHNjcmlwdCBpbiBwYWdlIGNvbnRleHQKICAgICAgICBjb25zdCBzY3JpcHRUYWcgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzY3JpcHQnKTsKICAgICAgICBzY3JpcHRUYWcuc2V0QXR0cmlidXRlKCdhc3luYycsIGZhbHNlKTsKICAgICAgICBpZiAoY29udGVudCkgewogICAgICAgICAgICBzY3JpcHRUYWcudGV4dENvbnRlbnQgPSBjb250ZW50OwogICAgICAgIH0KICAgICAgICBpZiAoc3JjKSB7CiAgICAgICAgICAgIHNjcmlwdFRhZy5zcmMgPSBzcmMKICAgICAgICB9CiAgICAgICAgY29udGFpbmVyLmluc2VydEJlZm9yZShzY3JpcHRUYWcsIGNvbnRhaW5lci5jaGlsZHJlblswXSk7CgogICAgICAgIC8vIHNjcmlwdCBleGVjdXRlZDsgcmVtb3ZlIHNjcmlwdCBlbGVtZW50IGZyb20gRE9NCiAgICAgICAgY29udGFpbmVyLnJlbW92ZUNoaWxkKHNjcmlwdFRhZyk7CiAgICB9IGNhdGNoIChlcnIpIHsKICAgICAgICBfYml0aXplbkNvbnNvbGUuZXJyb3IoJ0JpdGl6ZW4gc2NyaXB0IGluamVjdGlvbiBmYWlsZWQnLCBlcnIpOwogICAgfQp9CgovKioKICogRGV0ZXJtaW5lcyBpZiB0aGUgcHJvdmlkZXIgc2hvdWxkIGJlIGluamVjdGVkLgogKgogKiBAcmV0dXJucyB7Ym9vbGVhbn0ge0Bjb2RlIHRydWV9IGlmIHRoZSBwcm92aWRlciBzaG91bGQgYmUgaW5qZWN0ZWQuCiAqLwpmdW5jdGlvbiBzaG91bGRJbmplY3QoKSB7CiAgICByZXR1cm4gKAogICAgICAgIGRvY3R5cGVDaGVjaygpICYmCiAgICAgICAgc3VmZml4Q2hlY2soKSAmJgogICAgICAgIGRvY3VtZW50RWxlbWVudENoZWNrKCkgJiYKICAgICAgICAhYmxvY2tlZERvbWFpbkNoZWNrKCkKICAgICk7Cn0KCi8qKgogKiBDaGVja3MgdGhlIGRvY3R5cGUgb2YgdGhlIGN1cnJlbnQgZG9jdW1lbnQgaWYgaXQgZXhpc3RzCiAqCiAqIEByZXR1cm5zIHtib29sZWFufSB7QGNvZGUgdHJ1ZX0gaWYgdGhlIGRvY3R5cGUgaXMgaHRtbCBvciBpZiBub25lIGV4aXN0cwogKi8KZnVuY3Rpb24gZG9jdHlwZUNoZWNrKCkgewogICAgY29uc3QgeyBkb2N0eXBlIH0gPSB3aW5kb3cuZG9jdW1lbnQ7CiAgICBpZiAoZG9jdHlwZSkgewogICAgICAgIHJldHVybiBkb2N0eXBlLm5hbWUgPT09ICdodG1sJzsKICAgIH0KICAgIHJldHVybiB0cnVlOwp9CgovKioKICogUmV0dXJucyB3aGV0aGVyIG9yIG5vdCB0aGUgZXh0ZW5zaW9uIChzdWZmaXgpIG9mIHRoZSBjdXJyZW50IGRvY3VtZW50IGlzCiAqIHByb2hpYml0ZWQuCiAqCiAqIFRoaXMgY2hlY2tzIHtAY29kZSB3aW5kb3cubG9jYXRpb24ucGF0aG5hbWV9IGFnYWluc3QgYSBzZXQgb2YgZmlsZSBleHRlbnNpb25zCiAqIHRoYXQgc2hvdWxkIG5vdCBoYXZlIHRoZSBwcm92aWRlciBpbmplY3RlZCBpbnRvIHRoZW0uIFRoaXMgY2hlY2sgaXMgaW5kaWZmZXJlbnQKICogb2YgcXVlcnkgcGFyYW1ldGVycyBpbiB0aGUgbG9jYXRpb24uCiAqCiAqIEByZXR1cm5zIHtib29sZWFufSB3aGV0aGVyIG9yIG5vdCB0aGUgZXh0ZW5zaW9uIG9mIHRoZSBjdXJyZW50IGRvY3VtZW50IGlzIHByb2hpYml0ZWQKICovCmZ1bmN0aW9uIHN1ZmZpeENoZWNrKCkgewogICAgY29uc3QgcHJvaGliaXRlZFR5cGVzID0gWy9cXC54bWwkL3UsIC9cXC5wZGYkL3VdOwogICAgY29uc3QgY3VycmVudFVybCA9IHdpbmRvdy5sb2NhdGlvbi5wYXRobmFtZTsKICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcHJvaGliaXRlZFR5cGVzLmxlbmd0aDsgaSsrKSB7CiAgICAgICAgaWYgKHByb2hpYml0ZWRUeXBlc1tpXS50ZXN0KGN1cnJlbnRVcmwpKSB7CiAgICAgICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgICB9CiAgICB9CiAgICByZXR1cm4gdHJ1ZTsKfQoKLyoqCiAqIENoZWNrcyB0aGUgZG9jdW1lbnRFbGVtZW50IG9mIHRoZSBjdXJyZW50IGRvY3VtZW50CiAqCiAqIEByZXR1cm5zIHtib29sZWFufSB7QGNvZGUgdHJ1ZX0gaWYgdGhlIGRvY3VtZW50RWxlbWVudCBpcyBhbiBodG1sIG5vZGUgb3IgaWYgbm9uZSBleGlzdHMKICovCmZ1bmN0aW9uIGRvY3VtZW50RWxlbWVudENoZWNrKCkgewogICAgY29uc3QgZG9jdW1lbnRFbGVtZW50ID0gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50Lm5vZGVOYW1lOwogICAgaWYgKGRvY3VtZW50RWxlbWVudCkgewogICAgICAgIHJldHVybiBkb2N1bWVudEVsZW1lbnQudG9Mb3dlckNhc2UoKSA9PT0gJ2h0bWwnOwogICAgfQogICAgcmV0dXJuIHRydWU7Cn0KCi8qKgogKiBDaGVja3MgaWYgdGhlIGN1cnJlbnQgZG9tYWluIGlzIGJsb2NrZWQKICoKICogQHJldHVybnMge2Jvb2xlYW59IHtAY29kZSB0cnVlfSBpZiB0aGUgY3VycmVudCBkb21haW4gaXMgYmxvY2tlZAogKi8KZnVuY3Rpb24gYmxvY2tlZERvbWFpbkNoZWNrKCkgewogICAgY29uc3QgYmxvY2tlZERvbWFpbnMgPSBbCiAgICAgICAgJ3VzY291cnRzLmdvdicsCiAgICAgICAgJ2Ryb3Bib3guY29tJywKICAgICAgICAnd2ViYnlhd2FyZHMuY29tJywKICAgICAgICAnY2RuLnNob3BpZnkuY29tL3MvamF2YXNjcmlwdHMvdHJpY29yZGVyL3h0bGQtcmVhZC1vbmx5LWZyYW1lLmh0bWwnLAogICAgICAgICdhZHllbi5jb20nLAogICAgICAgICdncmF2aXR5Zm9ybXMuY29tJywKICAgICAgICAnaGFyYm91cmFpci5jb20nLAogICAgICAgICdhbmkuZ2FtZXIuY29tLnR3JywKICAgICAgICAnYmx1ZXNreWJvb2tpbmcuY29tJywKICAgICAgICAnc2hhcmVmaWxlLmNvbScsCiAgICBdOwogICAgY29uc3QgY3VycmVudFVybCA9IHdpbmRvdy5sb2NhdGlvbi5ocmVmOwogICAgbGV0IGN1cnJlbnRSZWdleDsKICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYmxvY2tlZERvbWFpbnMubGVuZ3RoOyBpKyspIHsKICAgICAgICBjb25zdCBibG9ja2VkRG9tYWluID0gYmxvY2tlZERvbWFpbnNbaV0ucmVwbGFjZSgnLicsICdcXC4nKTsKICAgICAgICBjdXJyZW50UmVnZXggPSBuZXcgUmVnRXhwKAogICAgICAgICAgICBgKD86aHR0cHM/OlxcL1xcLykoPzooPyEke2Jsb2NrZWREb21haW59KS4pKiRgLAogICAgICAgICAgICAndScsCiAgICAgICAgKTsKICAgICAgICBpZiAoIWN1cnJlbnRSZWdleC50ZXN0KGN1cnJlbnRVcmwpKSB7CiAgICAgICAgICAgIHJldHVybiB0cnVlOwogICAgICAgIH0KICAgIH0KICAgIHJldHVybiBmYWxzZTsKfQoKLyoqCiAqIFJldHVybnMgYSBwcm9taXNlIHRoYXQgcmVzb2x2ZXMgd2hlbiB0aGUgRE9NIGlzIGxvYWRlZCAoZG9lcyBub3Qgd2FpdCBmb3IgaW1hZ2VzIHRvIGxvYWQpCiAqLwphc3luYyBmdW5jdGlvbiBkb21Jc1JlYWR5KCkgewogICAgLy8gYWxyZWFkeSBsb2FkZWQKICAgIGlmIChbJ2ludGVyYWN0aXZlJywgJ2NvbXBsZXRlJ10uaW5jbHVkZXMoZG9jdW1lbnQucmVhZHlTdGF0ZSkpIHsKICAgICAgICByZXR1cm47CiAgICB9CiAgICAvLyB3YWl0IGZvciBsb2FkCiAgICBhd2FpdCBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4KICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignRE9NQ29udGVudExvYWRlZCcsIHJlc29sdmUsIHsgb25jZTogdHJ1ZSB9KSwKICAgICk7Cn0=");
String injectJsBundle = Uri.encodeComponent(utf8.fuse(base64).decode(""));

